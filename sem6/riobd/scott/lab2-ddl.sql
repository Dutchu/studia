-- Wyczysc tabelki
DECLARE
    TYPE table_arr IS VARRAY(4) OF VARCHAR2(30);
    tables      table_arr := table_arr('Wojewodztwa', 'Miasta', 'Klienci', 'Klienci1');
    table_count NUMBER;
BEGIN
    FOR i IN 1..tables.COUNT
        LOOP
            -- Check if the table exists
            SELECT COUNT(*)
            INTO table_count
            FROM USER_TABLES t
            WHERE TABLE_NAME = UPPER(tables(i));

            -- If the table exists, drop it
            IF table_count > 0 THEN
                EXECUTE IMMEDIATE 'DROP TABLE ' || tables(i) || ' CASCADE CONSTRAINTS';
                DBMS_OUTPUT.PUT_LINE('Table ' || tables(i) || ' dropped.');
            ELSE
                DBMS_OUTPUT.PUT_LINE('Table ' || tables(i) || ' does not exist.');
            END IF;
        END LOOP;
END;
/

-- Wyczysc widoki
DECLARE
    TYPE view_arr IS VARRAY(1) OF VARCHAR2(30);
    myViews      view_arr := view_arr('W_KLIENCI');
    view_count NUMBER;
BEGIN
    FOR i IN 1..myViews.COUNT
        LOOP
            -- Check if the table exists
            SELECT COUNT(*)
            INTO view_count
            FROM USER_VIEWS t
            WHERE VIEW_NAME = UPPER(myViews(i));

            -- If the table exists, drop it
            IF view_count > 0 THEN
                EXECUTE IMMEDIATE 'DROP VIEW ' || myViews(i) || ' CASCADE CONSTRAINTS';
                DBMS_OUTPUT.PUT_LINE('View ' || myViews(i) || ' dropped.');
            ELSE
                DBMS_OUTPUT.PUT_LINE('View ' || myViews(i) || ' does not exist.');
            END IF;
        END LOOP;
END;
/

CREATE TABLE Wojewodztwa
(
    WojewodztwoID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    Nazwa         VARCHAR2(30) NOT NULL,
    Aktywne       NUMBER(1) DEFAULT 1 CHECK ( Aktywne IN (0, 1) )
);
CREATE TABLE Miasta
(
    MiastoID      NUMBER GENERATED BY DEFAULT AS IDENTITY,
    Nazwa         VARCHAR2(30) NOT NULL,
    WojewodztwoID NUMBER
);

-- Dodatkowe ograniczenie na poziomie tabeli, aby data_ur < data_zatr (CHECK)
-- oraz ograniczenie aby nie zatrudnić pracownika poniżej 18 lat.
CREATE TABLE Klienci
(
    klientID      NUMBER GENERATED BY DEFAULT AS IDENTITY,
    Nazwisko      VARCHAR2(30)                        NOT NULL,
    Imie          VARCHAR2(20)                        NOT NULL,
    PESEL         VARCHAR2(11) UNIQUE,
    Data_ur       DATE                                NULL,
    Data_zatr     DATE  DEFAULT SYSDATE,
    Pensja        FLOAT DEFAULT 0 CHECK (Pensja >= 0) NOT NULL,
-- Definicja kolumny nie moze byc oparta o definicje innej kolumny, chyba ze bedzie kolumna wirtualna
    Pensja_roczna AS (Pensja * 12),
-- (?): Nie mam pomyslu co oznacza
    Ulica         VARCHAR2(100)                       NULL,
    Numer         VARCHAR2(50)                        NULL,
    Mieszkania    NUMBER                              NULL,
    MiastoID      NUMBER
-- Funkcje obliczajace daty nie sa funkcjami czystymi
--     Wiek          AS (FLOOR(MONTHS_BETWEEN(SYSDATE, Data_ur) / 12))
);

--------------------------------------------------------
--  Constraints for Table Wojewodztwa
--------------------------------------------------------
ALTER TABLE SCOTT.Wojewodztwa
    ADD CONSTRAINT "PK_WOJ" PRIMARY KEY ("WOJEWODZTWOID")
        USING INDEX ENABLE;

--------------------------------------------------------
--  Constraints for Table Miasta
--------------------------------------------------------
ALTER TABLE SCOTT.Miasta
    ADD CONSTRAINT "PK_MIA" PRIMARY KEY ("MIASTOID")
        USING INDEX ENABLE;

--------------------------------------------------------
--  Constraints for Table Klienci
--------------------------------------------------------
ALTER TABLE SCOTT.Klienci
    ADD CONSTRAINT "PK_KLI" PRIMARY KEY ("KLIENTID")
        USING INDEX ENABLE;

--------------------------------------------------------
--  Ref Constraints for Table Miasta
--------------------------------------------------------
ALTER TABLE SCOTT.Miasta
    ADD CONSTRAINT "FK_WOJID" FOREIGN KEY ("WOJEWODZTWOID")
        REFERENCES SCOTT.WOJEWODZTWA ("WOJEWODZTWOID") ENABLE;

--------------------------------------------------------
--  Ref Constraints for Table Klienci
/*
Dodatkowe ograniczenie na poziomie tabeli, aby data_ur < data_zatr (CHECK)
oraz ograniczenie aby nie zatrudnić pracownika poniżej 18 lat.
 */
--------------------------------------------------------
ALTER TABLE SCOTT.Klienci
    ADD CONSTRAINT "FK_MIAID" FOREIGN KEY ("MIASTOID")
        REFERENCES SCOTT.MIASTA ("MIASTOID") ENABLE
    ADD CONSTRAINT chk_data CHECK (Data_ur < Data_zatr) -- Named CHECK constraint
    ADD CONSTRAINT chk_age CHECK (FLOOR(MONTHS_BETWEEN(Data_zatr, Data_ur) / 12) >= 18);
-- Named CHECK constraint
-- Więzy CHECK dla kolumny nie mogą się odwoływać do innych kolumn


-- 1. Dołożyć do tabeli Wojewodztwa pole Państwo varchar2(20) null
ALTER TABLE WOJEWODZTWA
    ADD Panstwo VARCHAR2(20) NULL;

-- 2. Zmienić NULL na NOT NULL (defaultowa wartość pola to ‘Polska’)
ALTER TABLE WOJEWODZTWA
    MODIFY Panstwo DEFAULT 'Polska' NOT NULL;

-- 3. Zmienić typ danych kraj na VARCHAR2(5) -- nie spełnia warunków (zostawić tylko 5 znaków)
ALTER TABLE WOJEWODZTWA
    RENAME COLUMN Panstwo TO Kraj;
-- ALTER TABLE WOJEWODZTWA
-- MODIFY Kraj VARCHAR2(5);
-- Oracle nie ma czystej funkcji do przycinania znaków - nie mozna wiec zastosowac takiego sprawdzania
-- Tym samym nie da się zmniejszyc rozmiaru kolumny bez utraty danych, dlatego MODIFY wyrzuca blad dla wartosci 5

-- 4. Zmienić typ danych kraj na VARCHAR2(35)
ALTER TABLE WOJEWODZTWA
    MODIFY Kraj VARCHAR2(35);

-- 5. Zmienić nazwę kolumny Aktywne na Active
ALTER TABLE WOJEWODZTWA
    RENAME COLUMN Aktywne TO Active;

-- 6. Zarządzanie ograniczeniami np. CHECK - włączanie/wyłączanie
ALTER TABLE Klienci
    DROP CONSTRAINT chk_data
    DROP CONSTRAINT chk_age;

-- 7. Dołożyć do tabeli Miasta i jej kolumn osobne opisy
COMMENT ON TABLE Miasta IS 'Tabela z informacjami o miescie';
COMMENT ON COLUMN Miasta.MiastoID IS 'Identyfikator miasta';
COMMENT ON COLUMN Miasta.Nazwa IS 'Nazwa miasta';
COMMENT ON COLUMN Miasta.WojewodztwoID IS 'Klucz obcy do tabeli Wojewodztwa';

-- 8. Zmiana dwóch kluczy obcych na wartość kaskadowe usuwanie ON DELETE CASCADE i sprawdzić czy
-- skasowanie danego Wojewodztwa skasuje zarówno wszystkie miasta w tych województwach jak i klientów
-- w danych miastach.
ALTER TABLE MIASTA
    DROP CONSTRAINT FK_WOJID;
ALTER TABLE KLIENCI
    DROP CONSTRAINT FK_MIAID;
ALTER TABLE MIASTA
    ADD CONSTRAINT FK_WOJID FOREIGN KEY (WOJEWODZTWOID)
        REFERENCES Wojewodztwa (WOJEWODZTWOID)
            ON DELETE CASCADE;
ALTER TABLE KLIENCI
    ADD CONSTRAINT FK_MIA FOREIGN KEY (MIASTOID)
        REFERENCES MIASTA (MIASTOID)
            ON DELETE CASCADE;

INSERT INTO WOJEWODZTWA (Nazwa, ACTIVE)
VALUES ('Lodzkie', 0);
INSERT INTO WOJEWODZTWA (Nazwa, ACTIVE)
VALUES ('Mazowieckie', 0);

INSERT INTO MIASTA (Nazwa, WojewodztwoID)
VALUES ('Lodz', 1);
INSERT INTO MIASTA (Nazwa, WojewodztwoID)
VALUES ('Kalisz', 1);
INSERT INTO MIASTA (Nazwa, WojewodztwoID)
VALUES ('Warszawa', 2);
INSERT INTO MIASTA (Nazwa, WojewodztwoID)
VALUES ('Tomaszow', 2);

INSERT INTO Klienci (Nazwisko, Imie, PESEL, Data_ur, Data_zatr, Pensja, Ulica, Numer, Mieszkania, MiastoID)
VALUES ('Bober', 'Kamil', '97010112345', TO_DATE('1997-01-01', 'YYYY-MM-DD'), SYSDATE, 5000, 'Main Street', '123', 1,
        1);
INSERT INTO Klienci (Nazwisko, Imie, PESEL, Data_ur, Data_zatr, Pensja, Ulica, Numer, Mieszkania, MiastoID)
VALUES ('Bober', 'Kamil', '97010112346', TO_DATE('1997-01-01', 'YYYY-MM-DD'), SYSDATE, 5000, 'Main Street', '123', 1,
        2);
INSERT INTO Klienci (Nazwisko, Imie, PESEL, Data_ur, Data_zatr, Pensja, Ulica, Numer, Mieszkania, MiastoID)
VALUES ('Bober', 'Kamil', '97010112347', TO_DATE('1997-01-01', 'YYYY-MM-DD'), SYSDATE, 5000, 'Main Street', '123', 1,
        3);
INSERT INTO Klienci (Nazwisko, Imie, PESEL, Data_ur, Data_zatr, Pensja, Ulica, Numer, Mieszkania, MiastoID)
VALUES ('Bober', 'Kamil', '97010112348', TO_DATE('1997-01-01', 'YYYY-MM-DD'), SYSDATE, 5000, 'Main Street', '123', 1,
        4);
INSERT INTO Klienci (Nazwisko, Imie, PESEL, Data_ur, Data_zatr, Pensja, Ulica, Numer, Mieszkania, MiastoID)
VALUES ('Bober', 'Kamil', '97010112349', TO_DATE('1997-01-01', 'YYYY-MM-DD'), SYSDATE, 5000, 'Main Street', '123', 1,
        1);
INSERT INTO Klienci (Nazwisko, Imie, PESEL, Data_ur, Data_zatr, Pensja, Ulica, Numer, Mieszkania, MiastoID)
VALUES ('Bober', 'Kamil', '97010112350', TO_DATE('1997-01-01', 'YYYY-MM-DD'), SYSDATE, 5000, 'Main Street', '123', 1,
        2);
INSERT INTO Klienci (Nazwisko, Imie, PESEL, Data_ur, Data_zatr, Pensja, Ulica, Numer, Mieszkania, MiastoID)
VALUES ('Bober', 'Kamil', '97010112351', TO_DATE('1997-01-01', 'YYYY-MM-DD'), SYSDATE, 5000, 'Main Street', '123', 1,
        3);
INSERT INTO Klienci (Nazwisko, Imie, PESEL, Data_ur, Data_zatr, Pensja, Ulica, Numer, Mieszkania, MiastoID)
VALUES ('Bober', 'Kamil', '97010112352', TO_DATE('1997-01-01', 'YYYY-MM-DD'), SYSDATE, 5000, 'Main Street', '123', 1,
        4);

DELETE
FROM Wojewodztwa
WHERE WOJEWODZTWOID = 1;

-- 9. Zdefiniować widok, który poda kolumny Nazwisko klienta, jego wiek, pensję roczną, nazwa miasta i
-- województwa w którym mieszka.
CREATE VIEW w_klienci AS
SELECT
    k.Nazwisko AS "Nazwisko Klienta",
    FLOOR(MONTHS_BETWEEN(CURRENT_DATE, k.Data_ur) / 12) AS Wiek,
    k.PENSJA_ROCZNA AS "Pensja Roczna",
    m.Nazwa AS "Nazwa Miasta",
    w.Nazwa AS "Nazwa Wojewodztwa"
FROM KLIENCI k
JOIN Miasta m on k.MiastoID = m.MiastoID
JOIN Wojewodztwa w on m.WojewodztwoID = w.WojewodztwoID;

-- 10. Napisać zapytania, które podadzą nam jakie tabele mamy w bazie, Jakie widoki mamy w bazie oraz
-- nazwy i typ kolumn w danej tabeli oraz ograniczenia.
SELECT TABLE_NAME
FROM USER_TABLES;

SELECT TABLE_NAME
FROM ALL_TABLES;

SELECT VIEW_NAME
FROM USER_VIEWS;

SELECT VIEW_NAME
FROM ALL_VIEWS;

SELECT
    uc.CONSTRAINT_NAME,
    uc.CONSTRAINT_TYPE,
    ucc.COLUMN_NAME,
    uc.STATUS,
    uc.SEARCH_CONDITION,
    uc.R_CONSTRAINT_NAME
FROM USER_CONSTRAINTS uc
JOIN USER_CONS_COLUMNS ucc
    ON uc.CONSTRAINT_NAME = ucc.CONSTRAINT_NAME
WHERE uc.TABLE_NAME = 'KLIENCI';

-- 11. Zmienić nazwę tabeli Klienci na Klienci1
RENAME Klienci TO Klienci1;

-- 12. Zmienić kolejność kolumn
-- Mozna tylko skopiowac dane.

-- 13. Do zastanowienia się jak i gdzie przechowywać kod miejsca zamieszkania oraz jak wyglądałaby
-- struktura bazy ( np. 34-400 ), aby po podaniu kodu można byłoby wybrać przypisane do danego kodu
-- województwo, miasto i ulicę (dane już istnieją w bazie danych)

/***
  Trzy ostatnie cyfry byly by w relacji wiele do wielu z ulica.
  Ralacja wiele do wielu byla by modelowana przez tabele laczaca, ktora
  trzymala by jeszcze dodatkowo informacje o pierwszych cyfrach kodu z relacjami:
  Pierwsza cyfra kodu odnosic sie bedzie do wojewodztwa w relacji 1 do 1.
  Dwie pierwsze cyfry oznaczaja miasto w relacji wiele do jednego.
 */

