
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e68  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004014  08004014  00014014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800408c  0800408c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800408c  0800408c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800408c  0800408c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800408c  0800408c  0001408c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004090  08004090  00014090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000010  080040a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080040a4  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6f5  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e1  00000000  00000000  0002f735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00031818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  000327a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000286eb  00000000  00000000  00033630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115a1  00000000  00000000  0005bd1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faecf  00000000  00000000  0006d2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016818b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000413c  00000000  00000000  001681dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003ffc 	.word	0x08003ffc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08003ffc 	.word	0x08003ffc

080001ec <mems_init>:
static void MX_GPIO_Init(void);
static void MX_I2C3_Init(void);
static void LM75_Error_Handler(char * file, int line);

uint8_t mems_init(uint8_t acc_datarate, uint8_t acc_fullscale)
{  
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b0ac      	sub	sp, #176	; 0xb0
 80001f0:	af04      	add	r7, sp, #16
 80001f2:	4603      	mov	r3, r0
 80001f4:	460a      	mov	r2, r1
 80001f6:	71fb      	strb	r3, [r7, #7]
 80001f8:	4613      	mov	r3, r2
 80001fa:	71bb      	strb	r3, [r7, #6]
  RCC_PeriphCLKInitTypeDef PeriphClkInit;
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80001fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000200:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000202:	2300      	movs	r3, #0
 8000204:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000206:	f107 0310 	add.w	r3, r7, #16
 800020a:	4618      	mov	r0, r3
 800020c:	f002 fd4e 	bl	8002cac <HAL_RCCEx_PeriphCLKConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <mems_init+0x2e>
  {
	  Error_Handler();
 8000216:	f000 fce5 	bl	8000be4 <Error_Handler>
  }
  
  MX_GPIO_Init();
 800021a:	f000 f925 	bl	8000468 <MX_GPIO_Init>
  MX_I2C3_Init();
 800021e:	f000 f8e3 	bl	80003e8 <MX_I2C3_Init>
  
  uint8_t acc_axis = 7; // all axis 
 8000222:	2307      	movs	r3, #7
 8000224:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint8_t r[4];
  
  if(HAL_I2C_Mem_Read(&hi2c3, KAMAMI_L496_MEMS_ACC_ADDR << 1, MEMS_ACC_ID_REG, 1, r, 1, 1000) != HAL_OK)
 8000228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800022c:	9302      	str	r3, [sp, #8]
 800022e:	2301      	movs	r3, #1
 8000230:	9301      	str	r3, [sp, #4]
 8000232:	f107 030c 	add.w	r3, r7, #12
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	2301      	movs	r3, #1
 800023a:	220f      	movs	r2, #15
 800023c:	213a      	movs	r1, #58	; 0x3a
 800023e:	4835      	ldr	r0, [pc, #212]	; (8000314 <mems_init+0x128>)
 8000240:	f001 fa62 	bl	8001708 <HAL_I2C_Mem_Read>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d003      	beq.n	8000252 <mems_init+0x66>
	  LM75_Error_Handler(__FILE__, __LINE__);	
 800024a:	2146      	movs	r1, #70	; 0x46
 800024c:	4832      	ldr	r0, [pc, #200]	; (8000318 <mems_init+0x12c>)
 800024e:	f000 f93d 	bl	80004cc <LM75_Error_Handler>
  if(r[0] != MEMS_ACC_ID)
 8000252:	7b3b      	ldrb	r3, [r7, #12]
 8000254:	2b41      	cmp	r3, #65	; 0x41
 8000256:	d001      	beq.n	800025c <mems_init+0x70>
	  return 1;  
 8000258:	2301      	movs	r3, #1
 800025a:	e056      	b.n	800030a <mems_init+0x11e>
    
  if(acc_axis == MEMS_ACC_AXIS_XYZ)
 800025c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000260:	2b08      	cmp	r3, #8
 8000262:	d102      	bne.n	800026a <mems_init+0x7e>
	  acc_axis = MEMS_ACC_AXIS_X | MEMS_ACC_AXIS_Y | MEMS_ACC_AXIS_Z; // each axis is enabled individually
 8000264:	2307      	movs	r3, #7
 8000266:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  if(acc_datarate == 0 || acc_datarate >= 7 || acc_axis > 7 || (acc_fullscale & 0xfc) != 0 || acc_fullscale == 1)
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d00e      	beq.n	800028e <mems_init+0xa2>
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	2b06      	cmp	r3, #6
 8000274:	d80b      	bhi.n	800028e <mems_init+0xa2>
 8000276:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800027a:	2b07      	cmp	r3, #7
 800027c:	d807      	bhi.n	800028e <mems_init+0xa2>
 800027e:	79bb      	ldrb	r3, [r7, #6]
 8000280:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8000284:	2b00      	cmp	r3, #0
 8000286:	d102      	bne.n	800028e <mems_init+0xa2>
 8000288:	79bb      	ldrb	r3, [r7, #6]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d101      	bne.n	8000292 <mems_init+0xa6>
	  return 1;
 800028e:	2301      	movs	r3, #1
 8000290:	e03b      	b.n	800030a <mems_init+0x11e>
  
  r[0] = (acc_datarate << 4) | acc_axis;
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	011b      	lsls	r3, r3, #4
 8000296:	b25a      	sxtb	r2, r3
 8000298:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800029c:	4313      	orrs	r3, r2
 800029e:	b25b      	sxtb	r3, r3
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	733b      	strb	r3, [r7, #12]
  if(HAL_I2C_Mem_Write(&hi2c3, KAMAMI_L496_MEMS_ACC_ADDR << 1, 
 80002a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002a8:	9302      	str	r3, [sp, #8]
 80002aa:	2301      	movs	r3, #1
 80002ac:	9301      	str	r3, [sp, #4]
 80002ae:	f107 030c 	add.w	r3, r7, #12
 80002b2:	9300      	str	r3, [sp, #0]
 80002b4:	2301      	movs	r3, #1
 80002b6:	2220      	movs	r2, #32
 80002b8:	213a      	movs	r1, #58	; 0x3a
 80002ba:	4816      	ldr	r0, [pc, #88]	; (8000314 <mems_init+0x128>)
 80002bc:	f001 f910 	bl	80014e0 <HAL_I2C_Mem_Write>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d003      	beq.n	80002ce <mems_init+0xe2>
	  MEMS_ACC_CTRL1_REG, 1, r, 1, 1000) != HAL_OK)
	  LM75_Error_Handler(__FILE__, __LINE__);
 80002c6:	2152      	movs	r1, #82	; 0x52
 80002c8:	4813      	ldr	r0, [pc, #76]	; (8000318 <mems_init+0x12c>)
 80002ca:	f000 f8ff 	bl	80004cc <LM75_Error_Handler>
  
  r[0] = (acc_fullscale << 4) | 4; // set fullscale, turn address autoincrement on
 80002ce:	79bb      	ldrb	r3, [r7, #6]
 80002d0:	011b      	lsls	r3, r3, #4
 80002d2:	b25b      	sxtb	r3, r3
 80002d4:	f043 0304 	orr.w	r3, r3, #4
 80002d8:	b25b      	sxtb	r3, r3
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	733b      	strb	r3, [r7, #12]
  if(HAL_I2C_Mem_Write(&hi2c3, KAMAMI_L496_MEMS_ACC_ADDR << 1, 
 80002de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e2:	9302      	str	r3, [sp, #8]
 80002e4:	2301      	movs	r3, #1
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	f107 030c 	add.w	r3, r7, #12
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	2301      	movs	r3, #1
 80002f0:	2223      	movs	r2, #35	; 0x23
 80002f2:	213a      	movs	r1, #58	; 0x3a
 80002f4:	4807      	ldr	r0, [pc, #28]	; (8000314 <mems_init+0x128>)
 80002f6:	f001 f8f3 	bl	80014e0 <HAL_I2C_Mem_Write>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d003      	beq.n	8000308 <mems_init+0x11c>
	  MEMS_ACC_CTRL4_REG, 1, r, 1, 1000) != HAL_OK)
	  LM75_Error_Handler(__FILE__, __LINE__);
 8000300:	2157      	movs	r1, #87	; 0x57
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <mems_init+0x12c>)
 8000304:	f000 f8e2 	bl	80004cc <LM75_Error_Handler>
  
  return 0;
 8000308:	2300      	movs	r3, #0
}
 800030a:	4618      	mov	r0, r3
 800030c:	37a0      	adds	r7, #160	; 0xa0
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	2000002c 	.word	0x2000002c
 8000318:	08004014 	.word	0x08004014

0800031c <mems_acc_read_x>:
	  MEMS_ACC_X_REG | I2C_MRW, 1, (uint8_t*)res, 6, 1000) != HAL_OK)
	  LM75_Error_Handler(__FILE__, __LINE__);	
}

int16_t mems_acc_read_x(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b086      	sub	sp, #24
 8000320:	af04      	add	r7, sp, #16
  int16_t res;
  if(HAL_I2C_Mem_Read(&hi2c3, KAMAMI_L496_MEMS_ACC_ADDR << 1, 
 8000322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000326:	9302      	str	r3, [sp, #8]
 8000328:	2302      	movs	r3, #2
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	1dbb      	adds	r3, r7, #6
 800032e:	9300      	str	r3, [sp, #0]
 8000330:	2301      	movs	r3, #1
 8000332:	22a8      	movs	r2, #168	; 0xa8
 8000334:	213a      	movs	r1, #58	; 0x3a
 8000336:	4808      	ldr	r0, [pc, #32]	; (8000358 <mems_acc_read_x+0x3c>)
 8000338:	f001 f9e6 	bl	8001708 <HAL_I2C_Mem_Read>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d003      	beq.n	800034a <mems_acc_read_x+0x2e>
	  MEMS_ACC_X_REG | I2C_MRW, 1, (uint8_t*)&res, 2, 1000) != HAL_OK)
	  LM75_Error_Handler(__FILE__, __LINE__);	
 8000342:	2168      	movs	r1, #104	; 0x68
 8000344:	4805      	ldr	r0, [pc, #20]	; (800035c <mems_acc_read_x+0x40>)
 8000346:	f000 f8c1 	bl	80004cc <LM75_Error_Handler>
  return res;
 800034a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	2000002c 	.word	0x2000002c
 800035c:	08004014 	.word	0x08004014

08000360 <mems_acc_read_y>:

int16_t mems_acc_read_y(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af04      	add	r7, sp, #16
  int16_t res;
  if(HAL_I2C_Mem_Read(&hi2c3, KAMAMI_L496_MEMS_ACC_ADDR << 1, 
 8000366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800036a:	9302      	str	r3, [sp, #8]
 800036c:	2302      	movs	r3, #2
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	1dbb      	adds	r3, r7, #6
 8000372:	9300      	str	r3, [sp, #0]
 8000374:	2301      	movs	r3, #1
 8000376:	22aa      	movs	r2, #170	; 0xaa
 8000378:	213a      	movs	r1, #58	; 0x3a
 800037a:	4808      	ldr	r0, [pc, #32]	; (800039c <mems_acc_read_y+0x3c>)
 800037c:	f001 f9c4 	bl	8001708 <HAL_I2C_Mem_Read>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d003      	beq.n	800038e <mems_acc_read_y+0x2e>
	  MEMS_ACC_Y_REG | I2C_MRW, 1, (uint8_t*)&res, 2, 1000) != HAL_OK)
	  LM75_Error_Handler(__FILE__, __LINE__);	
 8000386:	2171      	movs	r1, #113	; 0x71
 8000388:	4805      	ldr	r0, [pc, #20]	; (80003a0 <mems_acc_read_y+0x40>)
 800038a:	f000 f89f 	bl	80004cc <LM75_Error_Handler>
  return res;
 800038e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000392:	4618      	mov	r0, r3
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	2000002c 	.word	0x2000002c
 80003a0:	08004014 	.word	0x08004014

080003a4 <mems_acc_read_z>:

int16_t mems_acc_read_z(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af04      	add	r7, sp, #16
  int16_t res;
  if(HAL_I2C_Mem_Read(&hi2c3, KAMAMI_L496_MEMS_ACC_ADDR << 1, 
 80003aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003ae:	9302      	str	r3, [sp, #8]
 80003b0:	2302      	movs	r3, #2
 80003b2:	9301      	str	r3, [sp, #4]
 80003b4:	1dbb      	adds	r3, r7, #6
 80003b6:	9300      	str	r3, [sp, #0]
 80003b8:	2301      	movs	r3, #1
 80003ba:	22ac      	movs	r2, #172	; 0xac
 80003bc:	213a      	movs	r1, #58	; 0x3a
 80003be:	4808      	ldr	r0, [pc, #32]	; (80003e0 <mems_acc_read_z+0x3c>)
 80003c0:	f001 f9a2 	bl	8001708 <HAL_I2C_Mem_Read>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d003      	beq.n	80003d2 <mems_acc_read_z+0x2e>
	  MEMS_ACC_Z_REG | I2C_MRW, 1, (uint8_t*)&res, 2, 1000) != HAL_OK)
	  LM75_Error_Handler(__FILE__, __LINE__);	
 80003ca:	217a      	movs	r1, #122	; 0x7a
 80003cc:	4805      	ldr	r0, [pc, #20]	; (80003e4 <mems_acc_read_z+0x40>)
 80003ce:	f000 f87d 	bl	80004cc <LM75_Error_Handler>
  return res;
 80003d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	2000002c 	.word	0x2000002c
 80003e4:	08004014 	.word	0x08004014

080003e8 <MX_I2C3_Init>:

/* I2C3 init function */
static void MX_I2C3_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <MX_I2C3_Init+0x74>)
 80003ee:	4a1c      	ldr	r2, [pc, #112]	; (8000460 <MX_I2C3_Init+0x78>)
 80003f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 80003f2:	4b1a      	ldr	r3, [pc, #104]	; (800045c <MX_I2C3_Init+0x74>)
 80003f4:	4a1b      	ldr	r2, [pc, #108]	; (8000464 <MX_I2C3_Init+0x7c>)
 80003f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80003f8:	4b18      	ldr	r3, [pc, #96]	; (800045c <MX_I2C3_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003fe:	4b17      	ldr	r3, [pc, #92]	; (800045c <MX_I2C3_Init+0x74>)
 8000400:	2201      	movs	r2, #1
 8000402:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <MX_I2C3_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <MX_I2C3_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <MX_I2C3_Init+0x74>)
 8000412:	2200      	movs	r2, #0
 8000414:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_I2C3_Init+0x74>)
 8000418:	2200      	movs	r2, #0
 800041a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <MX_I2C3_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000422:	480e      	ldr	r0, [pc, #56]	; (800045c <MX_I2C3_Init+0x74>)
 8000424:	f000 ffcc 	bl	80013c0 <HAL_I2C_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_I2C3_Init+0x4a>
  {
	  Error_Handler();
 800042e:	f000 fbd9 	bl	8000be4 <Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000432:	2100      	movs	r1, #0
 8000434:	4809      	ldr	r0, [pc, #36]	; (800045c <MX_I2C3_Init+0x74>)
 8000436:	f001 fd27 	bl	8001e88 <HAL_I2CEx_ConfigAnalogFilter>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_I2C3_Init+0x5c>
  {
	  Error_Handler();
 8000440:	f000 fbd0 	bl	8000be4 <Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000444:	2100      	movs	r1, #0
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <MX_I2C3_Init+0x74>)
 8000448:	f001 fd69 	bl	8001f1e <HAL_I2CEx_ConfigDigitalFilter>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_I2C3_Init+0x6e>
  {
	  Error_Handler();
 8000452:	f000 fbc7 	bl	8000be4 <Error_Handler>
  }

}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	2000002c 	.word	0x2000002c
 8000460:	40005c00 	.word	0x40005c00
 8000464:	10909cec 	.word	0x10909cec

08000468 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <MX_GPIO_Init+0x5c>)
 8000470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000472:	4a14      	ldr	r2, [pc, #80]	; (80004c4 <MX_GPIO_Init+0x5c>)
 8000474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <MX_GPIO_Init+0x5c>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000486:	f001 fdfb 	bl	8002080 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin : MEMS_RDY_MAG_Pin */
  GPIO_InitStruct.Pin = MEMS_RDY_MAG_Pin;
 800048a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800048e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000490:	2300      	movs	r3, #0
 8000492:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000494:	2300      	movs	r3, #0
 8000496:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MEMS_RDY_MAG_GPIO_Port, &GPIO_InitStruct);
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4619      	mov	r1, r3
 800049c:	480a      	ldr	r0, [pc, #40]	; (80004c8 <MX_GPIO_Init+0x60>)
 800049e:	f000 fde5 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT_AXL_Pin MEMS_INT_MAG_Pin */
  GPIO_InitStruct.Pin = MEMS_INT_AXL_Pin|MEMS_INT_MAG_Pin;
 80004a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80004a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	4619      	mov	r1, r3
 80004b6:	4804      	ldr	r0, [pc, #16]	; (80004c8 <MX_GPIO_Init+0x60>)
 80004b8:	f000 fdd8 	bl	800106c <HAL_GPIO_Init>

}
 80004bc:	bf00      	nop
 80004be:	3718      	adds	r7, #24
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	40021000 	.word	0x40021000
 80004c8:	48001800 	.word	0x48001800

080004cc <LM75_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void LM75_Error_Handler(char * file, int line)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 80004d6:	e7fe      	b.n	80004d6 <LM75_Error_Handler+0xa>

080004d8 <HAL_I2C_MspInit>:
  }
  /* USER CODE END Error_Handler_Debug */ 
}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a11      	ldr	r2, [pc, #68]	; (800052c <HAL_I2C_MspInit+0x54>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d11c      	bne.n	8000524 <HAL_I2C_MspInit+0x4c>
  
    /**I2C3 GPIO Configuration    
    PG7     ------> I2C3_SCL
    PG8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = MEMS_I2C3_SCL_Pin|MEMS_I2C3_SDA_Pin;
 80004ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80004ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004f0:	2312      	movs	r3, #18
 80004f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004f4:	2301      	movs	r3, #1
 80004f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004f8:	2303      	movs	r3, #3
 80004fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80004fc:	2304      	movs	r3, #4
 80004fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	4619      	mov	r1, r3
 8000506:	480a      	ldr	r0, [pc, #40]	; (8000530 <HAL_I2C_MspInit+0x58>)
 8000508:	f000 fdb0 	bl	800106c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <HAL_I2C_MspInit+0x5c>)
 800050e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000510:	4a08      	ldr	r2, [pc, #32]	; (8000534 <HAL_I2C_MspInit+0x5c>)
 8000512:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000516:	6593      	str	r3, [r2, #88]	; 0x58
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_I2C_MspInit+0x5c>)
 800051a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800051c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000524:	bf00      	nop
 8000526:	3720      	adds	r7, #32
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40005c00 	.word	0x40005c00
 8000530:	48001800 	.word	0x48001800
 8000534:	40021000 	.word	0x40021000

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fc0e 	bl	8000d5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f82d 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000546:	f000 f87d 	bl	8000644 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  Joy_Init();
 800054a:	f000 f8c9 	bl	80006e0 <Joy_Init>
  Dis7Seg_Init();
 800054e:	f000 f8f3 	bl	8000738 <Dis7Seg_Init>
  (void)mems_init(MEMS_ACC_DATARATE_10HZ, MEMS_ACC_FULLSCALE_2G);
 8000552:	2100      	movs	r1, #0
 8000554:	2001      	movs	r0, #1
 8000556:	f7ff fe49 	bl	80001ec <mems_init>

  __HAL_RCC_TIM2_CLK_ENABLE();
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <main+0x60>)
 800055c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <main+0x60>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6593      	str	r3, [r2, #88]	; 0x58
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <main+0x60>)
 8000568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <main+0x60>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	4a08      	ldr	r2, [pc, #32]	; (8000598 <main+0x60>)
 8000578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800057c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <main+0x60>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]
  MX_TIM2_Init();
 800058a:	f000 f85b 	bl	8000644 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800058e:	4803      	ldr	r0, [pc, #12]	; (800059c <main+0x64>)
 8000590:	f003 f8ae 	bl	80036f0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000594:	e7fe      	b.n	8000594 <main+0x5c>
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000
 800059c:	20000080 	.word	0x20000080

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b096      	sub	sp, #88	; 0x58
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	2244      	movs	r2, #68	; 0x44
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fd1c 	bl	8003fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	463b      	mov	r3, r7
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005c6:	f001 fd05 	bl	8001fd4 <HAL_PWREx_ControlVoltageScaling>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d0:	f000 fb08 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005d4:	2310      	movs	r3, #16
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005e0:	2360      	movs	r3, #96	; 0x60
 80005e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005e8:	2301      	movs	r3, #1
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80005f0:	2314      	movs	r3, #20
 80005f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4618      	mov	r0, r3
 8000606:	f001 fd4b 	bl	80020a0 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000610:	f000 fae8 	bl	8000be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2303      	movs	r3, #3
 800061a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800061c:	2390      	movs	r3, #144	; 0x90
 800061e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000628:	463b      	mov	r3, r7
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f002 f951 	bl	80028d4 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000638:	f000 fad4 	bl	8000be4 <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3758      	adds	r7, #88	; 0x58
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064a:	f107 0310 	add.w	r3, r7, #16
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000662:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <MX_TIM2_Init+0x98>)
 8000664:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000668:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <MX_TIM2_Init+0x98>)
 800066c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000670:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_TIM2_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <MX_TIM2_Init+0x98>)
 800067a:	2201      	movs	r2, #1
 800067c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_TIM2_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <MX_TIM2_Init+0x98>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800068a:	4814      	ldr	r0, [pc, #80]	; (80006dc <MX_TIM2_Init+0x98>)
 800068c:	f002 ffd8 	bl	8003640 <HAL_TIM_Base_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000696:	f000 faa5 	bl	8000be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800069a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006a0:	f107 0310 	add.w	r3, r7, #16
 80006a4:	4619      	mov	r1, r3
 80006a6:	480d      	ldr	r0, [pc, #52]	; (80006dc <MX_TIM2_Init+0x98>)
 80006a8:	f003 f9b1 	bl	8003a0e <HAL_TIM_ConfigClockSource>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80006b2:	f000 fa97 	bl	8000be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4806      	ldr	r0, [pc, #24]	; (80006dc <MX_TIM2_Init+0x98>)
 80006c4:	f003 fbc8 	bl	8003e58 <HAL_TIMEx_MasterConfigSynchronization>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80006ce:	f000 fa89 	bl	8000be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	3720      	adds	r7, #32
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000080 	.word	0x20000080

080006e0 <Joy_Init>:

/* USER CODE BEGIN 4 */
static void Joy_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef joyInitStruct = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOE_CLK_ENABLE();
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <Joy_Init+0x50>)
 80006f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f8:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <Joy_Init+0x50>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <Joy_Init+0x50>)
 8000702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000704:	f003 0310 	and.w	r3, r3, #16
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]

	joyInitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
	joyInitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
	joyInitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
	joyInitStruct.Pin = JOY_UP_PIN |
 8000718:	f248 030f 	movw	r3, #32783	; 0x800f
 800071c:	607b      	str	r3, [r7, #4]
					 	JOY_DOWN_PIN |
						JOY_LEFT_PIN |
						JOY_RIGHT_PIN |
						JOY_CENTER_PIN;

	HAL_GPIO_Init(GPIOE, &joyInitStruct);
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4619      	mov	r1, r3
 8000722:	4804      	ldr	r0, [pc, #16]	; (8000734 <Joy_Init+0x54>)
 8000724:	f000 fca2 	bl	800106c <HAL_GPIO_Init>
}
 8000728:	bf00      	nop
 800072a:	3718      	adds	r7, #24
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40021000 	.word	0x40021000
 8000734:	48001000 	.word	0x48001000

08000738 <Dis7Seg_Init>:

void Dis7Seg_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef initStruct = {0};
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <Dis7Seg_Init+0x80>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <Dis7Seg_Init+0x80>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <Dis7Seg_Init+0x80>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <Dis7Seg_Init+0x80>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <Dis7Seg_Init+0x80>)
 800076c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <Dis7Seg_Init+0x80>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
	HAL_PWREx_EnableVddIO2();
 800077e:	f001 fc7f 	bl	8002080 <HAL_PWREx_EnableVddIO2>

	initStruct.Pin = DIG1_PIN | DIG2_PIN | DIG3_PIN | DIG4_PIN;
 8000782:	233c      	movs	r3, #60	; 0x3c
 8000784:	60fb      	str	r3, [r7, #12]
	initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	613b      	str	r3, [r7, #16]
	initStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
	initStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DIG_PORT, &initStruct);
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	4619      	mov	r1, r3
 8000798:	4808      	ldr	r0, [pc, #32]	; (80007bc <Dis7Seg_Init+0x84>)
 800079a:	f000 fc67 	bl	800106c <HAL_GPIO_Init>

	initStruct.Pin = SEG_A_PIN | SEG_B_PIN | SEG_C_PIN |
 800079e:	f240 237f 	movw	r3, #639	; 0x27f
 80007a2:	60fb      	str	r3, [r7, #12]
				   	 SEG_D_PIN | SEG_E_PIN | SEG_F_PIN |
					 SEG_G_PIN | SEG_DP_PIN;
	HAL_GPIO_Init(SEG_PORT, &initStruct);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4619      	mov	r1, r3
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <Dis7Seg_Init+0x88>)
 80007ac:	f000 fc5e 	bl	800106c <HAL_GPIO_Init>
}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40021000 	.word	0x40021000
 80007bc:	48000400 	.word	0x48000400
 80007c0:	48001800 	.word	0x48001800

080007c4 <Dis7seg_display>:

void Dis7seg_display(uint8_t dotSecondPlace)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	static uint8_t dig = 0;

	HAL_GPIO_WritePin(DIG_PORT, DIG_MASK, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	213c      	movs	r1, #60	; 0x3c
 80007d2:	4822      	ldr	r0, [pc, #136]	; (800085c <Dis7seg_display+0x98>)
 80007d4:	f000 fddc 	bl	8001390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_PORT, SEG_MASK, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f240 217f 	movw	r1, #639	; 0x27f
 80007de:	4820      	ldr	r0, [pc, #128]	; (8000860 <Dis7seg_display+0x9c>)
 80007e0:	f000 fdd6 	bl	8001390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_PORT, display[dig], GPIO_PIN_SET);
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <Dis7seg_display+0xa0>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <Dis7seg_display+0xa4>)
 80007ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80007f0:	2201      	movs	r2, #1
 80007f2:	4619      	mov	r1, r3
 80007f4:	481a      	ldr	r0, [pc, #104]	; (8000860 <Dis7seg_display+0x9c>)
 80007f6:	f000 fdcb 	bl	8001390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIG_PORT, digit[dig], GPIO_PIN_SET);
 80007fa:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <Dis7seg_display+0xa0>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	4b1a      	ldr	r3, [pc, #104]	; (800086c <Dis7seg_display+0xa8>)
 8000802:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000806:	2201      	movs	r2, #1
 8000808:	4619      	mov	r1, r3
 800080a:	4814      	ldr	r0, [pc, #80]	; (800085c <Dis7seg_display+0x98>)
 800080c:	f000 fdc0 	bl	8001390 <HAL_GPIO_WritePin>

	if (dotSecondPlace && dig == 1)
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d00a      	beq.n	800082c <Dis7seg_display+0x68>
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <Dis7seg_display+0xa0>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d106      	bne.n	800082c <Dis7seg_display+0x68>
	{
		HAL_GPIO_WritePin(SEG_PORT, SEG_DP_PIN, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	480e      	ldr	r0, [pc, #56]	; (8000860 <Dis7seg_display+0x9c>)
 8000826:	f000 fdb3 	bl	8001390 <HAL_GPIO_WritePin>
 800082a:	e009      	b.n	8000840 <Dis7seg_display+0x7c>
	}
	else if (dig == 2)
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <Dis7seg_display+0xa0>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b02      	cmp	r3, #2
 8000832:	d105      	bne.n	8000840 <Dis7seg_display+0x7c>
	{
		HAL_GPIO_WritePin(SEG_PORT, SEG_DP_PIN, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083a:	4809      	ldr	r0, [pc, #36]	; (8000860 <Dis7seg_display+0x9c>)
 800083c:	f000 fda8 	bl	8001390 <HAL_GPIO_WritePin>
	}

	dig = (dig + 1) & 3;
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <Dis7seg_display+0xa0>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	3301      	adds	r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	f003 0303 	and.w	r3, r3, #3
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <Dis7seg_display+0xa0>)
 8000850:	701a      	strb	r2, [r3, #0]
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	48000400 	.word	0x48000400
 8000860:	48001800 	.word	0x48001800
 8000864:	200000d4 	.word	0x200000d4
 8000868:	200000cc 	.word	0x200000cc
 800086c:	08004044 	.word	0x08004044

08000870 <Dis7Seg_SetAxisValue>:

void Dis7Seg_SetAxisValue(const selectedAxisType * const selectedAxis, uint8_t * dotSecondPlace)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
	float axisValue = 0;
 800087a:	f04f 0300 	mov.w	r3, #0
 800087e:	617b      	str	r3, [r7, #20]

	switch (*selectedAxis) {
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b0a      	cmp	r3, #10
 8000886:	d002      	beq.n	800088e <Dis7Seg_SetAxisValue+0x1e>
 8000888:	2b0b      	cmp	r3, #11
 800088a:	d00a      	beq.n	80008a2 <Dis7Seg_SetAxisValue+0x32>
 800088c:	e013      	b.n	80008b6 <Dis7Seg_SetAxisValue+0x46>
		case X:
			axisValue = mems_acc_read_x();
 800088e:	f7ff fd45 	bl	800031c <mems_acc_read_x>
 8000892:	4603      	mov	r3, r0
 8000894:	ee07 3a90 	vmov	s15, r3
 8000898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800089c:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80008a0:	e013      	b.n	80008ca <Dis7Seg_SetAxisValue+0x5a>
		case Y:
			axisValue = mems_acc_read_y();
 80008a2:	f7ff fd5d 	bl	8000360 <mems_acc_read_y>
 80008a6:	4603      	mov	r3, r0
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b0:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80008b4:	e009      	b.n	80008ca <Dis7Seg_SetAxisValue+0x5a>
		case Z:
		default:
			axisValue = mems_acc_read_z();
 80008b6:	f7ff fd75 	bl	80003a4 <mems_acc_read_z>
 80008ba:	4603      	mov	r3, r0
 80008bc:	ee07 3a90 	vmov	s15, r3
 80008c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008c4:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80008c8:	bf00      	nop
	}

	axisValue *= 2.0F / MEMS_ACC_MAXVAL;
 80008ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80008ce:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8000ac8 <Dis7Seg_SetAxisValue+0x258>
 80008d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008d6:	edc7 7a05 	vstr	s15, [r7, #20]

	if (axisValue / 10.0F < 1.0F)
 80008da:	ed97 7a05 	vldr	s14, [r7, #20]
 80008de:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80008e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80008ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f2:	d57b      	bpl.n	80009ec <Dis7Seg_SetAxisValue+0x17c>
	{
		display[2] = segments[(uint8_t)(axisValue / 1.0F)];
 80008f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80008f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008fc:	edc7 7a01 	vstr	s15, [r7, #4]
 8000900:	793b      	ldrb	r3, [r7, #4]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	461a      	mov	r2, r3
 8000906:	4b71      	ldr	r3, [pc, #452]	; (8000acc <Dis7Seg_SetAxisValue+0x25c>)
 8000908:	5c9b      	ldrb	r3, [r3, r2]
 800090a:	b29a      	uxth	r2, r3
 800090c:	4b70      	ldr	r3, [pc, #448]	; (8000ad0 <Dis7Seg_SetAxisValue+0x260>)
 800090e:	809a      	strh	r2, [r3, #4]
		axisValue -= (uint8_t)(axisValue / 1.0F);
 8000910:	edd7 7a05 	vldr	s15, [r7, #20]
 8000914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000918:	edc7 7a01 	vstr	s15, [r7, #4]
 800091c:	793b      	ldrb	r3, [r7, #4]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	ee07 3a90 	vmov	s15, r3
 8000924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000928:	ed97 7a05 	vldr	s14, [r7, #20]
 800092c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000930:	edc7 7a05 	vstr	s15, [r7, #20]
		display[1] = segments[(uint8_t)(axisValue / 0.1F)];
 8000934:	ed97 7a05 	vldr	s14, [r7, #20]
 8000938:	eddf 6a66 	vldr	s13, [pc, #408]	; 8000ad4 <Dis7Seg_SetAxisValue+0x264>
 800093c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000940:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000944:	edc7 7a01 	vstr	s15, [r7, #4]
 8000948:	793b      	ldrb	r3, [r7, #4]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	461a      	mov	r2, r3
 800094e:	4b5f      	ldr	r3, [pc, #380]	; (8000acc <Dis7Seg_SetAxisValue+0x25c>)
 8000950:	5c9b      	ldrb	r3, [r3, r2]
 8000952:	b29a      	uxth	r2, r3
 8000954:	4b5e      	ldr	r3, [pc, #376]	; (8000ad0 <Dis7Seg_SetAxisValue+0x260>)
 8000956:	805a      	strh	r2, [r3, #2]
		axisValue -= ((uint8_t)(axisValue / 0.1F) * 0.1F);
 8000958:	ed97 7a05 	vldr	s14, [r7, #20]
 800095c:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8000ad4 <Dis7Seg_SetAxisValue+0x264>
 8000960:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000968:	edc7 7a01 	vstr	s15, [r7, #4]
 800096c:	793b      	ldrb	r3, [r7, #4]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	ee07 3a90 	vmov	s15, r3
 8000974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000978:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8000ad4 <Dis7Seg_SetAxisValue+0x264>
 800097c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000980:	ed97 7a05 	vldr	s14, [r7, #20]
 8000984:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000988:	edc7 7a05 	vstr	s15, [r7, #20]
		display[0] = segments[(uint8_t)(axisValue / 0.01F)];
 800098c:	ed97 7a05 	vldr	s14, [r7, #20]
 8000990:	eddf 6a51 	vldr	s13, [pc, #324]	; 8000ad8 <Dis7Seg_SetAxisValue+0x268>
 8000994:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800099c:	edc7 7a01 	vstr	s15, [r7, #4]
 80009a0:	793b      	ldrb	r3, [r7, #4]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b49      	ldr	r3, [pc, #292]	; (8000acc <Dis7Seg_SetAxisValue+0x25c>)
 80009a8:	5c9b      	ldrb	r3, [r3, r2]
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	4b48      	ldr	r3, [pc, #288]	; (8000ad0 <Dis7Seg_SetAxisValue+0x260>)
 80009ae:	801a      	strh	r2, [r3, #0]
		axisValue -= ((uint8_t)(axisValue / 0.01F) * 0.01F);
 80009b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80009b4:	eddf 6a48 	vldr	s13, [pc, #288]	; 8000ad8 <Dis7Seg_SetAxisValue+0x268>
 80009b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80009c4:	793b      	ldrb	r3, [r7, #4]
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	ee07 3a90 	vmov	s15, r3
 80009cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009d0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000ad8 <Dis7Seg_SetAxisValue+0x268>
 80009d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009d8:	ed97 7a05 	vldr	s14, [r7, #20]
 80009dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009e0:	edc7 7a05 	vstr	s15, [r7, #20]
		*dotSecondPlace = TRUE;
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	2201      	movs	r2, #1
 80009e8:	701a      	strb	r2, [r3, #0]
 80009ea:	e060      	b.n	8000aae <Dis7Seg_SetAxisValue+0x23e>
	}
	else
	{
		display[2] = segments[(uint8_t)(axisValue / 10.0F)];
 80009ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80009f0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80009f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009fc:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a00:	793b      	ldrb	r3, [r7, #4]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b31      	ldr	r3, [pc, #196]	; (8000acc <Dis7Seg_SetAxisValue+0x25c>)
 8000a08:	5c9b      	ldrb	r3, [r3, r2]
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	4b30      	ldr	r3, [pc, #192]	; (8000ad0 <Dis7Seg_SetAxisValue+0x260>)
 8000a0e:	809a      	strh	r2, [r3, #4]
		axisValue -= ((uint8_t)(axisValue / 10.0F * 10.0F));
 8000a10:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a14:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000a18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a1c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a28:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a2c:	793b      	ldrb	r3, [r7, #4]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	ee07 3a90 	vmov	s15, r3
 8000a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a38:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a40:	edc7 7a05 	vstr	s15, [r7, #20]
		display[1] = segments[(uint8_t)(axisValue / 1.0F)];
 8000a44:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a4c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a50:	793b      	ldrb	r3, [r7, #4]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <Dis7Seg_SetAxisValue+0x25c>)
 8000a58:	5c9b      	ldrb	r3, [r3, r2]
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <Dis7Seg_SetAxisValue+0x260>)
 8000a5e:	805a      	strh	r2, [r3, #2]
		axisValue -= (uint8_t)(axisValue / 1.0F);
 8000a60:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a68:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a6c:	793b      	ldrb	r3, [r7, #4]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	ee07 3a90 	vmov	s15, r3
 8000a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a78:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a80:	edc7 7a05 	vstr	s15, [r7, #20]
		display[0] = segments[(uint8_t)(axisValue / 0.1F)];
 8000a84:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a88:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000ad4 <Dis7Seg_SetAxisValue+0x264>
 8000a8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a94:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a98:	793b      	ldrb	r3, [r7, #4]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <Dis7Seg_SetAxisValue+0x25c>)
 8000aa0:	5c9b      	ldrb	r3, [r3, r2]
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <Dis7Seg_SetAxisValue+0x260>)
 8000aa6:	801a      	strh	r2, [r3, #0]
		*dotSecondPlace = FALSE;
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
	}

	display[3] = segments[*selectedAxis];
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <Dis7Seg_SetAxisValue+0x25c>)
 8000ab6:	5c9b      	ldrb	r3, [r3, r2]
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <Dis7Seg_SetAxisValue+0x260>)
 8000abc:	80da      	strh	r2, [r3, #6]
}
 8000abe:	bf00      	nop
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	38800100 	.word	0x38800100
 8000acc:	08004034 	.word	0x08004034
 8000ad0:	200000cc 	.word	0x200000cc
 8000ad4:	3dcccccd 	.word	0x3dcccccd
 8000ad8:	3c23d70a 	.word	0x3c23d70a

08000adc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	static selectedAxisType selectedAxis = Z;
	uint8_t * dotSecondPlace = FALSE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]

	Dis7Seg_SetAxisValue(&selectedAxis, dotSecondPlace);
 8000ae8:	68f9      	ldr	r1, [r7, #12]
 8000aea:	481a      	ldr	r0, [pc, #104]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000aec:	f7ff fec0 	bl	8000870 <Dis7Seg_SetAxisValue>

	Dis7seg_display(*dotSecondPlace);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fe65 	bl	80007c4 <Dis7seg_display>

	if (DetectFallingEdge(JOY_PORT, JOY_UP_PIN))
 8000afa:	2108      	movs	r1, #8
 8000afc:	4816      	ldr	r0, [pc, #88]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000afe:	f000 f82d 	bl	8000b5c <DetectFallingEdge>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d00c      	beq.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0x46>
	{
		if (++selectedAxis > Z)
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b12:	701a      	strb	r2, [r3, #0]
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b0c      	cmp	r3, #12
 8000b1a:	d902      	bls.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0x46>
		{
			selectedAxis = X;
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b1e:	220a      	movs	r2, #10
 8000b20:	701a      	strb	r2, [r3, #0]
		}
	}

	if (DetectFallingEdge(JOY_PORT, JOY_DOWN_PIN))
 8000b22:	2104      	movs	r1, #4
 8000b24:	480c      	ldr	r0, [pc, #48]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b26:	f000 f819 	bl	8000b5c <DetectFallingEdge>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00c      	beq.n	8000b4a <HAL_TIM_PeriodElapsedCallback+0x6e>
	{
		if (--selectedAxis < X)
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b09      	cmp	r3, #9
 8000b42:	d802      	bhi.n	8000b4a <HAL_TIM_PeriodElapsedCallback+0x6e>
		{
			selectedAxis = Z;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b46:	220c      	movs	r2, #12
 8000b48:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000000 	.word	0x20000000
 8000b58:	48001000 	.word	0x48001000

08000b5c <DetectFallingEdge>:

uint8_t DetectFallingEdge(GPIO_TypeDef * port, uint16_t pin)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	807b      	strh	r3, [r7, #2]
	static GPIO_TypeDef * prevPort;
	static uint16_t prevPin;
	static uint8_t buttonPressed = 0U;
	uint8_t buttonStatus = (~port->IDR & pin ? 1 : 0);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	43da      	mvns	r2, r3
 8000b6e:	887b      	ldrh	r3, [r7, #2]
 8000b70:	4013      	ands	r3, r2
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	bf14      	ite	ne
 8000b76:	2301      	movne	r3, #1
 8000b78:	2300      	moveq	r3, #0
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	73bb      	strb	r3, [r7, #14]
	uint8_t retVal_u8 = 0U;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	73fb      	strb	r3, [r7, #15]

	if (buttonStatus)
 8000b82:	7bbb      	ldrb	r3, [r7, #14]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d009      	beq.n	8000b9c <DetectFallingEdge+0x40>
	{
		buttonPressed = TRUE;
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <DetectFallingEdge+0x7c>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
		prevPort = port;
 8000b8e:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <DetectFallingEdge+0x80>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6013      	str	r3, [r2, #0]
		prevPin = pin;
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <DetectFallingEdge+0x84>)
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	8013      	strh	r3, [r2, #0]
 8000b9a:	e016      	b.n	8000bca <DetectFallingEdge+0x6e>
	}
	else if (!buttonStatus && buttonPressed && prevPort == port && prevPin == pin)
 8000b9c:	7bbb      	ldrb	r3, [r7, #14]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d113      	bne.n	8000bca <DetectFallingEdge+0x6e>
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <DetectFallingEdge+0x7c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d00f      	beq.n	8000bca <DetectFallingEdge+0x6e>
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <DetectFallingEdge+0x80>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d10a      	bne.n	8000bca <DetectFallingEdge+0x6e>
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <DetectFallingEdge+0x84>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	887a      	ldrh	r2, [r7, #2]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d105      	bne.n	8000bca <DetectFallingEdge+0x6e>
	{
		buttonPressed = FALSE;
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <DetectFallingEdge+0x7c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
		retVal_u8++;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
	}

	return retVal_u8;
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	200000d5 	.word	0x200000d5
 8000bdc:	200000d8 	.word	0x200000d8
 8000be0:	200000dc 	.word	0x200000dc

08000be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be8:	b672      	cpsid	i
}
 8000bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bec:	e7fe      	b.n	8000bec <Error_Handler+0x8>
	...

08000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <HAL_MspInit+0x44>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <HAL_MspInit+0x44>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6613      	str	r3, [r2, #96]	; 0x60
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_MspInit+0x44>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_MspInit+0x44>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_MspInit+0x44>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	6593      	str	r3, [r2, #88]	; 0x58
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_MspInit+0x44>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40021000 	.word	0x40021000

08000c38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c48:	d113      	bne.n	8000c72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <HAL_TIM_Base_MspInit+0x44>)
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <HAL_TIM_Base_MspInit+0x44>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6593      	str	r3, [r2, #88]	; 0x58
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_TIM_Base_MspInit+0x44>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	201c      	movs	r0, #28
 8000c68:	f000 f9c9 	bl	8000ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c6c:	201c      	movs	r0, #28
 8000c6e:	f000 f9e2 	bl	8001036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <NMI_Handler+0x4>

08000c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <MemManage_Handler+0x4>

08000c92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <UsageFault_Handler+0x4>

08000c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ccc:	f000 f89c 	bl	8000e08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <TIM2_IRQHandler+0x10>)
 8000cda:	f002 fd79 	bl	80037d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  
  /* USER CODE END TIM2_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000080 	.word	0x20000080

08000ce8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <SystemInit+0x20>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf2:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <SystemInit+0x20>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d10:	f7ff ffea 	bl	8000ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d14:	480c      	ldr	r0, [pc, #48]	; (8000d48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d16:	490d      	ldr	r1, [pc, #52]	; (8000d4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d18:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <LoopForever+0xe>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	; (8000d58 <LoopForever+0x16>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f003 f933 	bl	8003fa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d3e:	f7ff fbfb 	bl	8000538 <main>

08000d42 <LoopForever>:

LoopForever:
    b LoopForever
 8000d42:	e7fe      	b.n	8000d42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d44:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d50:	08004094 	.word	0x08004094
  ldr r2, =_sbss
 8000d54:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d58:	200000e4 	.word	0x200000e4

08000d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC1_2_IRQHandler>

08000d5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 f93d 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d6e:	200f      	movs	r0, #15
 8000d70:	f000 f80e 	bl	8000d90 <HAL_InitTick>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d002      	beq.n	8000d80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	71fb      	strb	r3, [r7, #7]
 8000d7e:	e001      	b.n	8000d84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d80:	f7ff ff36 	bl	8000bf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d84:	79fb      	ldrb	r3, [r7, #7]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <HAL_InitTick+0x6c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d023      	beq.n	8000dec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000da4:	4b16      	ldr	r3, [pc, #88]	; (8000e00 <HAL_InitTick+0x70>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_InitTick+0x6c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f949 	bl	8001052 <HAL_SYSTICK_Config>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d10f      	bne.n	8000de6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b0f      	cmp	r3, #15
 8000dca:	d809      	bhi.n	8000de0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f000 f913 	bl	8000ffe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_InitTick+0x74>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	e007      	b.n	8000df0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	73fb      	strb	r3, [r7, #15]
 8000de4:	e004      	b.n	8000df0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	73fb      	strb	r3, [r7, #15]
 8000dea:	e001      	b.n	8000df0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	2000000c 	.word	0x2000000c
 8000e00:	20000004 	.word	0x20000004
 8000e04:	20000008 	.word	0x20000008

08000e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x20>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x24>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_IncTick+0x24>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	2000000c 	.word	0x2000000c
 8000e2c:	200000e0 	.word	0x200000e0

08000e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <HAL_GetTick+0x14>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	200000e0 	.word	0x200000e0

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db0b      	blt.n	8000ed6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 021f 	and.w	r2, r3, #31
 8000ec4:	4907      	ldr	r1, [pc, #28]	; (8000ee4 <__NVIC_EnableIRQ+0x38>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	2001      	movs	r0, #1
 8000ece:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	; (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb4:	d301      	bcc.n	8000fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00f      	b.n	8000fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <SysTick_Config+0x40>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f7ff ff8e 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <SysTick_Config+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <SysTick_Config+0x40>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff29 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001010:	f7ff ff3e 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8001014:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff ff8e 	bl	8000f3c <NVIC_EncodePriority>
 8001020:	4602      	mov	r2, r0
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff5d 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff31 	bl	8000eac <__NVIC_EnableIRQ>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffa2 	bl	8000fa4 <SysTick_Config>
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107a:	e166      	b.n	800134a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	2101      	movs	r1, #1
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	4013      	ands	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 8158 	beq.w	8001344 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b01      	cmp	r3, #1
 800109e:	d005      	beq.n	80010ac <HAL_GPIO_Init+0x40>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d130      	bne.n	800110e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010e2:	2201      	movs	r2, #1
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	f003 0201 	and.w	r2, r3, #1
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	2b03      	cmp	r3, #3
 8001118:	d017      	beq.n	800114a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d123      	bne.n	800119e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	08da      	lsrs	r2, r3, #3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3208      	adds	r2, #8
 800115e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001162:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	691a      	ldr	r2, [r3, #16]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	08da      	lsrs	r2, r3, #3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	6939      	ldr	r1, [r7, #16]
 800119a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	2203      	movs	r2, #3
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0203 	and.w	r2, r3, #3
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 80b2 	beq.w	8001344 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e0:	4b61      	ldr	r3, [pc, #388]	; (8001368 <HAL_GPIO_Init+0x2fc>)
 80011e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e4:	4a60      	ldr	r2, [pc, #384]	; (8001368 <HAL_GPIO_Init+0x2fc>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6613      	str	r3, [r2, #96]	; 0x60
 80011ec:	4b5e      	ldr	r3, [pc, #376]	; (8001368 <HAL_GPIO_Init+0x2fc>)
 80011ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011f8:	4a5c      	ldr	r2, [pc, #368]	; (800136c <HAL_GPIO_Init+0x300>)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	089b      	lsrs	r3, r3, #2
 80011fe:	3302      	adds	r3, #2
 8001200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	220f      	movs	r2, #15
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001222:	d02b      	beq.n	800127c <HAL_GPIO_Init+0x210>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a52      	ldr	r2, [pc, #328]	; (8001370 <HAL_GPIO_Init+0x304>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d025      	beq.n	8001278 <HAL_GPIO_Init+0x20c>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a51      	ldr	r2, [pc, #324]	; (8001374 <HAL_GPIO_Init+0x308>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d01f      	beq.n	8001274 <HAL_GPIO_Init+0x208>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a50      	ldr	r2, [pc, #320]	; (8001378 <HAL_GPIO_Init+0x30c>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d019      	beq.n	8001270 <HAL_GPIO_Init+0x204>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a4f      	ldr	r2, [pc, #316]	; (800137c <HAL_GPIO_Init+0x310>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d013      	beq.n	800126c <HAL_GPIO_Init+0x200>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a4e      	ldr	r2, [pc, #312]	; (8001380 <HAL_GPIO_Init+0x314>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d00d      	beq.n	8001268 <HAL_GPIO_Init+0x1fc>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a4d      	ldr	r2, [pc, #308]	; (8001384 <HAL_GPIO_Init+0x318>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d007      	beq.n	8001264 <HAL_GPIO_Init+0x1f8>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a4c      	ldr	r2, [pc, #304]	; (8001388 <HAL_GPIO_Init+0x31c>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d101      	bne.n	8001260 <HAL_GPIO_Init+0x1f4>
 800125c:	2307      	movs	r3, #7
 800125e:	e00e      	b.n	800127e <HAL_GPIO_Init+0x212>
 8001260:	2308      	movs	r3, #8
 8001262:	e00c      	b.n	800127e <HAL_GPIO_Init+0x212>
 8001264:	2306      	movs	r3, #6
 8001266:	e00a      	b.n	800127e <HAL_GPIO_Init+0x212>
 8001268:	2305      	movs	r3, #5
 800126a:	e008      	b.n	800127e <HAL_GPIO_Init+0x212>
 800126c:	2304      	movs	r3, #4
 800126e:	e006      	b.n	800127e <HAL_GPIO_Init+0x212>
 8001270:	2303      	movs	r3, #3
 8001272:	e004      	b.n	800127e <HAL_GPIO_Init+0x212>
 8001274:	2302      	movs	r3, #2
 8001276:	e002      	b.n	800127e <HAL_GPIO_Init+0x212>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <HAL_GPIO_Init+0x212>
 800127c:	2300      	movs	r3, #0
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	f002 0203 	and.w	r2, r2, #3
 8001284:	0092      	lsls	r2, r2, #2
 8001286:	4093      	lsls	r3, r2
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800128e:	4937      	ldr	r1, [pc, #220]	; (800136c <HAL_GPIO_Init+0x300>)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	3302      	adds	r3, #2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800129c:	4b3b      	ldr	r3, [pc, #236]	; (800138c <HAL_GPIO_Init+0x320>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012c0:	4a32      	ldr	r2, [pc, #200]	; (800138c <HAL_GPIO_Init+0x320>)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012c6:	4b31      	ldr	r3, [pc, #196]	; (800138c <HAL_GPIO_Init+0x320>)
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012ea:	4a28      	ldr	r2, [pc, #160]	; (800138c <HAL_GPIO_Init+0x320>)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012f0:	4b26      	ldr	r3, [pc, #152]	; (800138c <HAL_GPIO_Init+0x320>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001314:	4a1d      	ldr	r2, [pc, #116]	; (800138c <HAL_GPIO_Init+0x320>)
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <HAL_GPIO_Init+0x320>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800133e:	4a13      	ldr	r2, [pc, #76]	; (800138c <HAL_GPIO_Init+0x320>)
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3301      	adds	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	fa22 f303 	lsr.w	r3, r2, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	f47f ae91 	bne.w	800107c <HAL_GPIO_Init+0x10>
  }
}
 800135a:	bf00      	nop
 800135c:	bf00      	nop
 800135e:	371c      	adds	r7, #28
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	40021000 	.word	0x40021000
 800136c:	40010000 	.word	0x40010000
 8001370:	48000400 	.word	0x48000400
 8001374:	48000800 	.word	0x48000800
 8001378:	48000c00 	.word	0x48000c00
 800137c:	48001000 	.word	0x48001000
 8001380:	48001400 	.word	0x48001400
 8001384:	48001800 	.word	0x48001800
 8001388:	48001c00 	.word	0x48001c00
 800138c:	40010400 	.word	0x40010400

08001390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
 800139c:	4613      	mov	r3, r2
 800139e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a0:	787b      	ldrb	r3, [r7, #1]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e081      	b.n	80014d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d106      	bne.n	80013ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff f876 	bl	80004d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2224      	movs	r2, #36	; 0x24
 80013f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0201 	bic.w	r2, r2, #1
 8001402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001410:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001420:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d107      	bne.n	800143a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	e006      	b.n	8001448 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001446:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d104      	bne.n	800145a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001458:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800146c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800147c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69d9      	ldr	r1, [r3, #28]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1a      	ldr	r2, [r3, #32]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0201 	orr.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2220      	movs	r2, #32
 80014c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	4608      	mov	r0, r1
 80014ea:	4611      	mov	r1, r2
 80014ec:	461a      	mov	r2, r3
 80014ee:	4603      	mov	r3, r0
 80014f0:	817b      	strh	r3, [r7, #10]
 80014f2:	460b      	mov	r3, r1
 80014f4:	813b      	strh	r3, [r7, #8]
 80014f6:	4613      	mov	r3, r2
 80014f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b20      	cmp	r3, #32
 8001504:	f040 80f9 	bne.w	80016fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <HAL_I2C_Mem_Write+0x34>
 800150e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001510:	2b00      	cmp	r3, #0
 8001512:	d105      	bne.n	8001520 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0ed      	b.n	80016fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001526:	2b01      	cmp	r3, #1
 8001528:	d101      	bne.n	800152e <HAL_I2C_Mem_Write+0x4e>
 800152a:	2302      	movs	r3, #2
 800152c:	e0e6      	b.n	80016fc <HAL_I2C_Mem_Write+0x21c>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001536:	f7ff fc7b 	bl	8000e30 <HAL_GetTick>
 800153a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2319      	movs	r3, #25
 8001542:	2201      	movs	r2, #1
 8001544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f000 fac3 	bl	8001ad4 <I2C_WaitOnFlagUntilTimeout>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0d1      	b.n	80016fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2221      	movs	r2, #33	; 0x21
 800155c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2240      	movs	r2, #64	; 0x40
 8001564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2200      	movs	r2, #0
 800156c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6a3a      	ldr	r2, [r7, #32]
 8001572:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001578:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001580:	88f8      	ldrh	r0, [r7, #6]
 8001582:	893a      	ldrh	r2, [r7, #8]
 8001584:	8979      	ldrh	r1, [r7, #10]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	9301      	str	r3, [sp, #4]
 800158a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	4603      	mov	r3, r0
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f000 f9d3 	bl	800193c <I2C_RequestMemoryWrite>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0a9      	b.n	80016fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	2bff      	cmp	r3, #255	; 0xff
 80015b0:	d90e      	bls.n	80015d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	22ff      	movs	r2, #255	; 0xff
 80015b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	8979      	ldrh	r1, [r7, #10]
 80015c0:	2300      	movs	r3, #0
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f000 fc2b 	bl	8001e24 <I2C_TransferConfig>
 80015ce:	e00f      	b.n	80015f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	8979      	ldrh	r1, [r7, #10]
 80015e2:	2300      	movs	r3, #0
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 fc1a 	bl	8001e24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f000 faad 	bl	8001b54 <I2C_WaitOnTXISFlagUntilTimeout>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e07b      	b.n	80016fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001608:	781a      	ldrb	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161e:	b29b      	uxth	r3, r3
 8001620:	3b01      	subs	r3, #1
 8001622:	b29a      	uxth	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162c:	3b01      	subs	r3, #1
 800162e:	b29a      	uxth	r2, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001638:	b29b      	uxth	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d034      	beq.n	80016a8 <HAL_I2C_Mem_Write+0x1c8>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001642:	2b00      	cmp	r3, #0
 8001644:	d130      	bne.n	80016a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164c:	2200      	movs	r2, #0
 800164e:	2180      	movs	r1, #128	; 0x80
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f000 fa3f 	bl	8001ad4 <I2C_WaitOnFlagUntilTimeout>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e04d      	b.n	80016fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001664:	b29b      	uxth	r3, r3
 8001666:	2bff      	cmp	r3, #255	; 0xff
 8001668:	d90e      	bls.n	8001688 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	22ff      	movs	r2, #255	; 0xff
 800166e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001674:	b2da      	uxtb	r2, r3
 8001676:	8979      	ldrh	r1, [r7, #10]
 8001678:	2300      	movs	r3, #0
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f000 fbcf 	bl	8001e24 <I2C_TransferConfig>
 8001686:	e00f      	b.n	80016a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800168c:	b29a      	uxth	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001696:	b2da      	uxtb	r2, r3
 8001698:	8979      	ldrh	r1, [r7, #10]
 800169a:	2300      	movs	r3, #0
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 fbbe 	bl	8001e24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d19e      	bne.n	80015f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 fa8c 	bl	8001bd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e01a      	b.n	80016fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2220      	movs	r2, #32
 80016cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6859      	ldr	r1, [r3, #4]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_I2C_Mem_Write+0x224>)
 80016da:	400b      	ands	r3, r1
 80016dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2220      	movs	r2, #32
 80016e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80016fa:	2302      	movs	r3, #2
  }
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	fe00e800 	.word	0xfe00e800

08001708 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af02      	add	r7, sp, #8
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	4608      	mov	r0, r1
 8001712:	4611      	mov	r1, r2
 8001714:	461a      	mov	r2, r3
 8001716:	4603      	mov	r3, r0
 8001718:	817b      	strh	r3, [r7, #10]
 800171a:	460b      	mov	r3, r1
 800171c:	813b      	strh	r3, [r7, #8]
 800171e:	4613      	mov	r3, r2
 8001720:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b20      	cmp	r3, #32
 800172c:	f040 80fd 	bne.w	800192a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001730:	6a3b      	ldr	r3, [r7, #32]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <HAL_I2C_Mem_Read+0x34>
 8001736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001738:	2b00      	cmp	r3, #0
 800173a:	d105      	bne.n	8001748 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001742:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0f1      	b.n	800192c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_I2C_Mem_Read+0x4e>
 8001752:	2302      	movs	r3, #2
 8001754:	e0ea      	b.n	800192c <HAL_I2C_Mem_Read+0x224>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800175e:	f7ff fb67 	bl	8000e30 <HAL_GetTick>
 8001762:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2319      	movs	r3, #25
 800176a:	2201      	movs	r2, #1
 800176c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 f9af 	bl	8001ad4 <I2C_WaitOnFlagUntilTimeout>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0d5      	b.n	800192c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2222      	movs	r2, #34	; 0x22
 8001784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2240      	movs	r2, #64	; 0x40
 800178c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6a3a      	ldr	r2, [r7, #32]
 800179a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2200      	movs	r2, #0
 80017a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017a8:	88f8      	ldrh	r0, [r7, #6]
 80017aa:	893a      	ldrh	r2, [r7, #8]
 80017ac:	8979      	ldrh	r1, [r7, #10]
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	4603      	mov	r3, r0
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 f913 	bl	80019e4 <I2C_RequestMemoryRead>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0ad      	b.n	800192c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	2bff      	cmp	r3, #255	; 0xff
 80017d8:	d90e      	bls.n	80017f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	22ff      	movs	r2, #255	; 0xff
 80017de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	8979      	ldrh	r1, [r7, #10]
 80017e8:	4b52      	ldr	r3, [pc, #328]	; (8001934 <HAL_I2C_Mem_Read+0x22c>)
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f000 fb17 	bl	8001e24 <I2C_TransferConfig>
 80017f6:	e00f      	b.n	8001818 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001806:	b2da      	uxtb	r2, r3
 8001808:	8979      	ldrh	r1, [r7, #10]
 800180a:	4b4a      	ldr	r3, [pc, #296]	; (8001934 <HAL_I2C_Mem_Read+0x22c>)
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 fb06 	bl	8001e24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181e:	2200      	movs	r2, #0
 8001820:	2104      	movs	r1, #4
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 f956 	bl	8001ad4 <I2C_WaitOnFlagUntilTimeout>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e07c      	b.n	800192c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184e:	3b01      	subs	r3, #1
 8001850:	b29a      	uxth	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185a:	b29b      	uxth	r3, r3
 800185c:	3b01      	subs	r3, #1
 800185e:	b29a      	uxth	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001868:	b29b      	uxth	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d034      	beq.n	80018d8 <HAL_I2C_Mem_Read+0x1d0>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001872:	2b00      	cmp	r3, #0
 8001874:	d130      	bne.n	80018d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187c:	2200      	movs	r2, #0
 800187e:	2180      	movs	r1, #128	; 0x80
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f000 f927 	bl	8001ad4 <I2C_WaitOnFlagUntilTimeout>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e04d      	b.n	800192c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001894:	b29b      	uxth	r3, r3
 8001896:	2bff      	cmp	r3, #255	; 0xff
 8001898:	d90e      	bls.n	80018b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	22ff      	movs	r2, #255	; 0xff
 800189e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	8979      	ldrh	r1, [r7, #10]
 80018a8:	2300      	movs	r3, #0
 80018aa:	9300      	str	r3, [sp, #0]
 80018ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f000 fab7 	bl	8001e24 <I2C_TransferConfig>
 80018b6:	e00f      	b.n	80018d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018bc:	b29a      	uxth	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	8979      	ldrh	r1, [r7, #10]
 80018ca:	2300      	movs	r3, #0
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f000 faa6 	bl	8001e24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018dc:	b29b      	uxth	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d19a      	bne.n	8001818 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f974 	bl	8001bd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e01a      	b.n	800192c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2220      	movs	r2, #32
 80018fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6859      	ldr	r1, [r3, #4]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_I2C_Mem_Read+0x230>)
 800190a:	400b      	ands	r3, r1
 800190c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2220      	movs	r2, #32
 8001912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e000      	b.n	800192c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800192a:	2302      	movs	r3, #2
  }
}
 800192c:	4618      	mov	r0, r3
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	80002400 	.word	0x80002400
 8001938:	fe00e800 	.word	0xfe00e800

0800193c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af02      	add	r7, sp, #8
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	4608      	mov	r0, r1
 8001946:	4611      	mov	r1, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4603      	mov	r3, r0
 800194c:	817b      	strh	r3, [r7, #10]
 800194e:	460b      	mov	r3, r1
 8001950:	813b      	strh	r3, [r7, #8]
 8001952:	4613      	mov	r3, r2
 8001954:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	8979      	ldrh	r1, [r7, #10]
 800195c:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <I2C_RequestMemoryWrite+0xa4>)
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 fa5d 	bl	8001e24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	69b9      	ldr	r1, [r7, #24]
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f8f0 	bl	8001b54 <I2C_WaitOnTXISFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e02c      	b.n	80019d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d105      	bne.n	8001990 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001984:	893b      	ldrh	r3, [r7, #8]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	629a      	str	r2, [r3, #40]	; 0x28
 800198e:	e015      	b.n	80019bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001990:	893b      	ldrh	r3, [r7, #8]
 8001992:	0a1b      	lsrs	r3, r3, #8
 8001994:	b29b      	uxth	r3, r3
 8001996:	b2da      	uxtb	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	69b9      	ldr	r1, [r7, #24]
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 f8d6 	bl	8001b54 <I2C_WaitOnTXISFlagUntilTimeout>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e012      	b.n	80019d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019b2:	893b      	ldrh	r3, [r7, #8]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2200      	movs	r2, #0
 80019c4:	2180      	movs	r1, #128	; 0x80
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 f884 	bl	8001ad4 <I2C_WaitOnFlagUntilTimeout>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	80002000 	.word	0x80002000

080019e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af02      	add	r7, sp, #8
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	4608      	mov	r0, r1
 80019ee:	4611      	mov	r1, r2
 80019f0:	461a      	mov	r2, r3
 80019f2:	4603      	mov	r3, r0
 80019f4:	817b      	strh	r3, [r7, #10]
 80019f6:	460b      	mov	r3, r1
 80019f8:	813b      	strh	r3, [r7, #8]
 80019fa:	4613      	mov	r3, r2
 80019fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	8979      	ldrh	r1, [r7, #10]
 8001a04:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <I2C_RequestMemoryRead+0xa4>)
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	f000 fa0a 	bl	8001e24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	69b9      	ldr	r1, [r7, #24]
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 f89d 	bl	8001b54 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e02c      	b.n	8001a7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a24:	88fb      	ldrh	r3, [r7, #6]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d105      	bne.n	8001a36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a2a:	893b      	ldrh	r3, [r7, #8]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
 8001a34:	e015      	b.n	8001a62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a36:	893b      	ldrh	r3, [r7, #8]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	69b9      	ldr	r1, [r7, #24]
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 f883 	bl	8001b54 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e012      	b.n	8001a7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a58:	893b      	ldrh	r3, [r7, #8]
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2140      	movs	r1, #64	; 0x40
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 f831 	bl	8001ad4 <I2C_WaitOnFlagUntilTimeout>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	80002000 	.word	0x80002000

08001a8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d103      	bne.n	8001aaa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d007      	beq.n	8001ac8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699a      	ldr	r2, [r3, #24]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	619a      	str	r2, [r3, #24]
  }
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ae4:	e022      	b.n	8001b2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d01e      	beq.n	8001b2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aee:	f7ff f99f 	bl	8000e30 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d302      	bcc.n	8001b04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d113      	bne.n	8001b2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b08:	f043 0220 	orr.w	r2, r3, #32
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2220      	movs	r2, #32
 8001b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e00f      	b.n	8001b4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	4013      	ands	r3, r2
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	bf0c      	ite	eq
 8001b3c:	2301      	moveq	r3, #1
 8001b3e:	2300      	movne	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	461a      	mov	r2, r3
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d0cd      	beq.n	8001ae6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b60:	e02c      	b.n	8001bbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 f870 	bl	8001c4c <I2C_IsErrorOccurred>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e02a      	b.n	8001bcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7c:	d01e      	beq.n	8001bbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b7e:	f7ff f957 	bl	8000e30 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d302      	bcc.n	8001b94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d113      	bne.n	8001bbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b98:	f043 0220 	orr.w	r2, r3, #32
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e007      	b.n	8001bcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d1cb      	bne.n	8001b62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001be0:	e028      	b.n	8001c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 f830 	bl	8001c4c <I2C_IsErrorOccurred>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e026      	b.n	8001c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf6:	f7ff f91b 	bl	8000e30 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d302      	bcc.n	8001c0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d113      	bne.n	8001c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	f043 0220 	orr.w	r2, r3, #32
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e007      	b.n	8001c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	2b20      	cmp	r3, #32
 8001c40:	d1cf      	bne.n	8001be2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d075      	beq.n	8001d64 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2210      	movs	r2, #16
 8001c7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c80:	e056      	b.n	8001d30 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d052      	beq.n	8001d30 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c8a:	f7ff f8d1 	bl	8000e30 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d302      	bcc.n	8001ca0 <I2C_IsErrorOccurred+0x54>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d147      	bne.n	8001d30 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001caa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cc2:	d12e      	bne.n	8001d22 <I2C_IsErrorOccurred+0xd6>
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cca:	d02a      	beq.n	8001d22 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001ccc:	7cfb      	ldrb	r3, [r7, #19]
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	d027      	beq.n	8001d22 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ce0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ce2:	f7ff f8a5 	bl	8000e30 <HAL_GetTick>
 8001ce6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ce8:	e01b      	b.n	8001d22 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001cea:	f7ff f8a1 	bl	8000e30 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b19      	cmp	r3, #25
 8001cf6:	d914      	bls.n	8001d22 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfc:	f043 0220 	orr.w	r2, r3, #32
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2220      	movs	r2, #32
 8001d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	d1dc      	bne.n	8001cea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	2b20      	cmp	r3, #32
 8001d3c:	d003      	beq.n	8001d46 <I2C_IsErrorOccurred+0xfa>
 8001d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d09d      	beq.n	8001c82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d103      	bne.n	8001d56 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2220      	movs	r2, #32
 8001d54:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00b      	beq.n	8001db0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	f043 0308 	orr.w	r3, r3, #8
 8001d9e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001da8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d01c      	beq.n	8001e14 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f7ff fe56 	bl	8001a8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6859      	ldr	r1, [r3, #4]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <I2C_IsErrorOccurred+0x1d4>)
 8001dec:	400b      	ands	r3, r1
 8001dee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3728      	adds	r7, #40	; 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	fe00e800 	.word	0xfe00e800

08001e24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	817b      	strh	r3, [r7, #10]
 8001e32:	4613      	mov	r3, r2
 8001e34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e36:	897b      	ldrh	r3, [r7, #10]
 8001e38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e3c:	7a7b      	ldrb	r3, [r7, #9]
 8001e3e:	041b      	lsls	r3, r3, #16
 8001e40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e44:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e52:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	0d5b      	lsrs	r3, r3, #21
 8001e5e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <I2C_TransferConfig+0x60>)
 8001e64:	430b      	orrs	r3, r1
 8001e66:	43db      	mvns	r3, r3
 8001e68:	ea02 0103 	and.w	r1, r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e76:	bf00      	nop
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	03ff63ff 	.word	0x03ff63ff

08001e88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	d138      	bne.n	8001f10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e032      	b.n	8001f12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2224      	movs	r2, #36	; 0x24
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001eda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6819      	ldr	r1, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2220      	movs	r2, #32
 8001f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	e000      	b.n	8001f12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f10:	2302      	movs	r3, #2
  }
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	d139      	bne.n	8001fa8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e033      	b.n	8001faa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2224      	movs	r2, #36	; 0x24
 8001f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0201 	bic.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	021b      	lsls	r3, r3, #8
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2220      	movs	r2, #32
 8001f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e000      	b.n	8001faa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fa8:	2302      	movs	r3, #2
  }
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
	...

08001fb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40007000 	.word	0x40007000

08001fd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe2:	d130      	bne.n	8002046 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fe4:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ff0:	d038      	beq.n	8002064 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ffa:	4a1e      	ldr	r2, [pc, #120]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002000:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2232      	movs	r2, #50	; 0x32
 8002008:	fb02 f303 	mul.w	r3, r2, r3
 800200c:	4a1b      	ldr	r2, [pc, #108]	; (800207c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	0c9b      	lsrs	r3, r3, #18
 8002014:	3301      	adds	r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002018:	e002      	b.n	8002020 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	3b01      	subs	r3, #1
 800201e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800202c:	d102      	bne.n	8002034 <HAL_PWREx_ControlVoltageScaling+0x60>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f2      	bne.n	800201a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002040:	d110      	bne.n	8002064 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e00f      	b.n	8002066 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002046:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800204e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002052:	d007      	beq.n	8002064 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002054:	4b07      	ldr	r3, [pc, #28]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800205c:	4a05      	ldr	r2, [pc, #20]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800205e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002062:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40007000 	.word	0x40007000
 8002078:	20000004 	.word	0x20000004
 800207c:	431bde83 	.word	0x431bde83

08002080 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4a04      	ldr	r2, [pc, #16]	; (800209c <HAL_PWREx_EnableVddIO2+0x1c>)
 800208a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800208e:	6053      	str	r3, [r2, #4]
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40007000 	.word	0x40007000

080020a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	f000 bc08 	b.w	80028c4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b4:	4b96      	ldr	r3, [pc, #600]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020be:	4b94      	ldr	r3, [pc, #592]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80e4 	beq.w	800229e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d007      	beq.n	80020ec <HAL_RCC_OscConfig+0x4c>
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	f040 808b 	bne.w	80021fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	f040 8087 	bne.w	80021fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ec:	4b88      	ldr	r3, [pc, #544]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_OscConfig+0x64>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e3df      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a1a      	ldr	r2, [r3, #32]
 8002108:	4b81      	ldr	r3, [pc, #516]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <HAL_RCC_OscConfig+0x7e>
 8002114:	4b7e      	ldr	r3, [pc, #504]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800211c:	e005      	b.n	800212a <HAL_RCC_OscConfig+0x8a>
 800211e:	4b7c      	ldr	r3, [pc, #496]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800212a:	4293      	cmp	r3, r2
 800212c:	d223      	bcs.n	8002176 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	4618      	mov	r0, r3
 8002134:	f000 fd5a 	bl	8002bec <RCC_SetFlashLatencyFromMSIRange>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e3c0      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002142:	4b73      	ldr	r3, [pc, #460]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a72      	ldr	r2, [pc, #456]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002148:	f043 0308 	orr.w	r3, r3, #8
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b70      	ldr	r3, [pc, #448]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	496d      	ldr	r1, [pc, #436]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800215c:	4313      	orrs	r3, r2
 800215e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002160:	4b6b      	ldr	r3, [pc, #428]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	4968      	ldr	r1, [pc, #416]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
 8002174:	e025      	b.n	80021c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002176:	4b66      	ldr	r3, [pc, #408]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a65      	ldr	r2, [pc, #404]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800217c:	f043 0308 	orr.w	r3, r3, #8
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b63      	ldr	r3, [pc, #396]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	4960      	ldr	r1, [pc, #384]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002194:	4b5e      	ldr	r3, [pc, #376]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	021b      	lsls	r3, r3, #8
 80021a2:	495b      	ldr	r1, [pc, #364]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fd1a 	bl	8002bec <RCC_SetFlashLatencyFromMSIRange>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e380      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021c2:	f000 fc87 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 80021c6:	4602      	mov	r2, r0
 80021c8:	4b51      	ldr	r3, [pc, #324]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	4950      	ldr	r1, [pc, #320]	; (8002314 <HAL_RCC_OscConfig+0x274>)
 80021d4:	5ccb      	ldrb	r3, [r1, r3]
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	fa22 f303 	lsr.w	r3, r2, r3
 80021de:	4a4e      	ldr	r2, [pc, #312]	; (8002318 <HAL_RCC_OscConfig+0x278>)
 80021e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021e2:	4b4e      	ldr	r3, [pc, #312]	; (800231c <HAL_RCC_OscConfig+0x27c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe fdd2 	bl	8000d90 <HAL_InitTick>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d052      	beq.n	800229c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	e364      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d032      	beq.n	8002268 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002202:	4b43      	ldr	r3, [pc, #268]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a42      	ldr	r2, [pc, #264]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800220e:	f7fe fe0f 	bl	8000e30 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002216:	f7fe fe0b 	bl	8000e30 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e34d      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002228:	4b39      	ldr	r3, [pc, #228]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002234:	4b36      	ldr	r3, [pc, #216]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a35      	ldr	r2, [pc, #212]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800223a:	f043 0308 	orr.w	r3, r3, #8
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b33      	ldr	r3, [pc, #204]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	4930      	ldr	r1, [pc, #192]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002252:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	492b      	ldr	r1, [pc, #172]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002262:	4313      	orrs	r3, r2
 8002264:	604b      	str	r3, [r1, #4]
 8002266:	e01a      	b.n	800229e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002268:	4b29      	ldr	r3, [pc, #164]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a28      	ldr	r2, [pc, #160]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002274:	f7fe fddc 	bl	8000e30 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800227c:	f7fe fdd8 	bl	8000e30 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e31a      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x1dc>
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800229c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d073      	beq.n	8002392 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_OscConfig+0x21c>
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	d10e      	bne.n	80022d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d10b      	bne.n	80022d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d063      	beq.n	8002390 <HAL_RCC_OscConfig+0x2f0>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d15f      	bne.n	8002390 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e2f7      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022dc:	d106      	bne.n	80022ec <HAL_RCC_OscConfig+0x24c>
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a0b      	ldr	r2, [pc, #44]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e025      	b.n	8002338 <HAL_RCC_OscConfig+0x298>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f4:	d114      	bne.n	8002320 <HAL_RCC_OscConfig+0x280>
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a05      	ldr	r2, [pc, #20]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b03      	ldr	r3, [pc, #12]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a02      	ldr	r2, [pc, #8]	; (8002310 <HAL_RCC_OscConfig+0x270>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e013      	b.n	8002338 <HAL_RCC_OscConfig+0x298>
 8002310:	40021000 	.word	0x40021000
 8002314:	0800404c 	.word	0x0800404c
 8002318:	20000004 	.word	0x20000004
 800231c:	20000008 	.word	0x20000008
 8002320:	4ba0      	ldr	r3, [pc, #640]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a9f      	ldr	r2, [pc, #636]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b9d      	ldr	r3, [pc, #628]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a9c      	ldr	r2, [pc, #624]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe fd76 	bl	8000e30 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002348:	f7fe fd72 	bl	8000e30 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e2b4      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800235a:	4b92      	ldr	r3, [pc, #584]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x2a8>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe fd62 	bl	8000e30 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7fe fd5e 	bl	8000e30 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e2a0      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002382:	4b88      	ldr	r3, [pc, #544]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x2d0>
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d060      	beq.n	8002460 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_OscConfig+0x310>
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d119      	bne.n	80023de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d116      	bne.n	80023de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b0:	4b7c      	ldr	r3, [pc, #496]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_OscConfig+0x328>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e27d      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c8:	4b76      	ldr	r3, [pc, #472]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	061b      	lsls	r3, r3, #24
 80023d6:	4973      	ldr	r1, [pc, #460]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023dc:	e040      	b.n	8002460 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d023      	beq.n	800242e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e6:	4b6f      	ldr	r3, [pc, #444]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a6e      	ldr	r2, [pc, #440]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f2:	f7fe fd1d 	bl	8000e30 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fa:	f7fe fd19 	bl	8000e30 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e25b      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240c:	4b65      	ldr	r3, [pc, #404]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002418:	4b62      	ldr	r3, [pc, #392]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	061b      	lsls	r3, r3, #24
 8002426:	495f      	ldr	r1, [pc, #380]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
 800242c:	e018      	b.n	8002460 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242e:	4b5d      	ldr	r3, [pc, #372]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a5c      	ldr	r2, [pc, #368]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7fe fcf9 	bl	8000e30 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002442:	f7fe fcf5 	bl	8000e30 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e237      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002454:	4b53      	ldr	r3, [pc, #332]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d03c      	beq.n	80024e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01c      	beq.n	80024ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002474:	4b4b      	ldr	r3, [pc, #300]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800247a:	4a4a      	ldr	r2, [pc, #296]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002484:	f7fe fcd4 	bl	8000e30 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248c:	f7fe fcd0 	bl	8000e30 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e212      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800249e:	4b41      	ldr	r3, [pc, #260]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ef      	beq.n	800248c <HAL_RCC_OscConfig+0x3ec>
 80024ac:	e01b      	b.n	80024e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ae:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b4:	4a3b      	ldr	r2, [pc, #236]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024b6:	f023 0301 	bic.w	r3, r3, #1
 80024ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7fe fcb7 	bl	8000e30 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c6:	f7fe fcb3 	bl	8000e30 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e1f5      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d8:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1ef      	bne.n	80024c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 80a6 	beq.w	8002640 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f4:	2300      	movs	r3, #0
 80024f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024f8:	4b2a      	ldr	r3, [pc, #168]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 80024fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10d      	bne.n	8002520 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002504:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002508:	4a26      	ldr	r2, [pc, #152]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800250a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250e:	6593      	str	r3, [r2, #88]	; 0x58
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800251c:	2301      	movs	r3, #1
 800251e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002520:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <HAL_RCC_OscConfig+0x508>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d118      	bne.n	800255e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800252c:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <HAL_RCC_OscConfig+0x508>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <HAL_RCC_OscConfig+0x508>)
 8002532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002536:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002538:	f7fe fc7a 	bl	8000e30 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002540:	f7fe fc76 	bl	8000e30 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e1b8      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <HAL_RCC_OscConfig+0x508>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d108      	bne.n	8002578 <HAL_RCC_OscConfig+0x4d8>
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002576:	e029      	b.n	80025cc <HAL_RCC_OscConfig+0x52c>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2b05      	cmp	r3, #5
 800257e:	d115      	bne.n	80025ac <HAL_RCC_OscConfig+0x50c>
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002586:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	4a03      	ldr	r2, [pc, #12]	; (80025a4 <HAL_RCC_OscConfig+0x504>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025a0:	e014      	b.n	80025cc <HAL_RCC_OscConfig+0x52c>
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40007000 	.word	0x40007000
 80025ac:	4b9d      	ldr	r3, [pc, #628]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	4a9c      	ldr	r2, [pc, #624]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025bc:	4b99      	ldr	r3, [pc, #612]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c2:	4a98      	ldr	r2, [pc, #608]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 80025c4:	f023 0304 	bic.w	r3, r3, #4
 80025c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d016      	beq.n	8002602 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d4:	f7fe fc2c 	bl	8000e30 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025dc:	f7fe fc28 	bl	8000e30 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e168      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f2:	4b8c      	ldr	r3, [pc, #560]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 80025f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0ed      	beq.n	80025dc <HAL_RCC_OscConfig+0x53c>
 8002600:	e015      	b.n	800262e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002602:	f7fe fc15 	bl	8000e30 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002608:	e00a      	b.n	8002620 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7fe fc11 	bl	8000e30 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	; 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e151      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002620:	4b80      	ldr	r3, [pc, #512]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1ed      	bne.n	800260a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800262e:	7ffb      	ldrb	r3, [r7, #31]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d105      	bne.n	8002640 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002634:	4b7b      	ldr	r3, [pc, #492]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	4a7a      	ldr	r2, [pc, #488]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 800263a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b00      	cmp	r3, #0
 800264a:	d03c      	beq.n	80026c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01c      	beq.n	800268e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002654:	4b73      	ldr	r3, [pc, #460]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 8002656:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800265a:	4a72      	ldr	r2, [pc, #456]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002664:	f7fe fbe4 	bl	8000e30 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800266c:	f7fe fbe0 	bl	8000e30 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e122      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800267e:	4b69      	ldr	r3, [pc, #420]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 8002680:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0ef      	beq.n	800266c <HAL_RCC_OscConfig+0x5cc>
 800268c:	e01b      	b.n	80026c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800268e:	4b65      	ldr	r3, [pc, #404]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 8002690:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002694:	4a63      	ldr	r2, [pc, #396]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269e:	f7fe fbc7 	bl	8000e30 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026a6:	f7fe fbc3 	bl	8000e30 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e105      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026b8:	4b5a      	ldr	r3, [pc, #360]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 80026ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1ef      	bne.n	80026a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80f9 	beq.w	80028c2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	f040 80cf 	bne.w	8002878 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026da:	4b52      	ldr	r3, [pc, #328]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f003 0203 	and.w	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d12c      	bne.n	8002748 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	3b01      	subs	r3, #1
 80026fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d123      	bne.n	8002748 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d11b      	bne.n	8002748 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d113      	bne.n	8002748 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272a:	085b      	lsrs	r3, r3, #1
 800272c:	3b01      	subs	r3, #1
 800272e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002730:	429a      	cmp	r2, r3
 8002732:	d109      	bne.n	8002748 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	085b      	lsrs	r3, r3, #1
 8002740:	3b01      	subs	r3, #1
 8002742:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002744:	429a      	cmp	r2, r3
 8002746:	d071      	beq.n	800282c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b0c      	cmp	r3, #12
 800274c:	d068      	beq.n	8002820 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800274e:	4b35      	ldr	r3, [pc, #212]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d105      	bne.n	8002766 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800275a:	4b32      	ldr	r3, [pc, #200]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e0ac      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800276a:	4b2e      	ldr	r3, [pc, #184]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a2d      	ldr	r2, [pc, #180]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 8002770:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002774:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002776:	f7fe fb5b 	bl	8000e30 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277e:	f7fe fb57 	bl	8000e30 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e099      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002790:	4b24      	ldr	r3, [pc, #144]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f0      	bne.n	800277e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800279c:	4b21      	ldr	r3, [pc, #132]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	4b21      	ldr	r3, [pc, #132]	; (8002828 <HAL_RCC_OscConfig+0x788>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027ac:	3a01      	subs	r2, #1
 80027ae:	0112      	lsls	r2, r2, #4
 80027b0:	4311      	orrs	r1, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027b6:	0212      	lsls	r2, r2, #8
 80027b8:	4311      	orrs	r1, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027be:	0852      	lsrs	r2, r2, #1
 80027c0:	3a01      	subs	r2, #1
 80027c2:	0552      	lsls	r2, r2, #21
 80027c4:	4311      	orrs	r1, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027ca:	0852      	lsrs	r2, r2, #1
 80027cc:	3a01      	subs	r2, #1
 80027ce:	0652      	lsls	r2, r2, #25
 80027d0:	4311      	orrs	r1, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027d6:	06d2      	lsls	r2, r2, #27
 80027d8:	430a      	orrs	r2, r1
 80027da:	4912      	ldr	r1, [pc, #72]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0f      	ldr	r2, [pc, #60]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 80027e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027ec:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 80027f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027f8:	f7fe fb1a 	bl	8000e30 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002800:	f7fe fb16 	bl	8000e30 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e058      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002812:	4b04      	ldr	r3, [pc, #16]	; (8002824 <HAL_RCC_OscConfig+0x784>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800281e:	e050      	b.n	80028c2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e04f      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
 8002824:	40021000 	.word	0x40021000
 8002828:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800282c:	4b27      	ldr	r3, [pc, #156]	; (80028cc <HAL_RCC_OscConfig+0x82c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d144      	bne.n	80028c2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002838:	4b24      	ldr	r3, [pc, #144]	; (80028cc <HAL_RCC_OscConfig+0x82c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a23      	ldr	r2, [pc, #140]	; (80028cc <HAL_RCC_OscConfig+0x82c>)
 800283e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002842:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002844:	4b21      	ldr	r3, [pc, #132]	; (80028cc <HAL_RCC_OscConfig+0x82c>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4a20      	ldr	r2, [pc, #128]	; (80028cc <HAL_RCC_OscConfig+0x82c>)
 800284a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002850:	f7fe faee 	bl	8000e30 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe faea 	bl	8000e30 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e02c      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286a:	4b18      	ldr	r3, [pc, #96]	; (80028cc <HAL_RCC_OscConfig+0x82c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0x7b8>
 8002876:	e024      	b.n	80028c2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2b0c      	cmp	r3, #12
 800287c:	d01f      	beq.n	80028be <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287e:	4b13      	ldr	r3, [pc, #76]	; (80028cc <HAL_RCC_OscConfig+0x82c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a12      	ldr	r2, [pc, #72]	; (80028cc <HAL_RCC_OscConfig+0x82c>)
 8002884:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288a:	f7fe fad1 	bl	8000e30 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002892:	f7fe facd 	bl	8000e30 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e00f      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_RCC_OscConfig+0x82c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f0      	bne.n	8002892 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_RCC_OscConfig+0x82c>)
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	4905      	ldr	r1, [pc, #20]	; (80028cc <HAL_RCC_OscConfig+0x82c>)
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_RCC_OscConfig+0x830>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	60cb      	str	r3, [r1, #12]
 80028bc:	e001      	b.n	80028c2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3720      	adds	r7, #32
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	feeefffc 	.word	0xfeeefffc

080028d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0e7      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b75      	ldr	r3, [pc, #468]	; (8002ac0 <HAL_RCC_ClockConfig+0x1ec>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d910      	bls.n	8002918 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b72      	ldr	r3, [pc, #456]	; (8002ac0 <HAL_RCC_ClockConfig+0x1ec>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 0207 	bic.w	r2, r3, #7
 80028fe:	4970      	ldr	r1, [pc, #448]	; (8002ac0 <HAL_RCC_ClockConfig+0x1ec>)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b6e      	ldr	r3, [pc, #440]	; (8002ac0 <HAL_RCC_ClockConfig+0x1ec>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0cf      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d010      	beq.n	8002946 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	4b66      	ldr	r3, [pc, #408]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002930:	429a      	cmp	r2, r3
 8002932:	d908      	bls.n	8002946 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002934:	4b63      	ldr	r3, [pc, #396]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4960      	ldr	r1, [pc, #384]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8002942:	4313      	orrs	r3, r2
 8002944:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d04c      	beq.n	80029ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b03      	cmp	r3, #3
 8002958:	d107      	bne.n	800296a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295a:	4b5a      	ldr	r3, [pc, #360]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d121      	bne.n	80029aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e0a6      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002972:	4b54      	ldr	r3, [pc, #336]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d115      	bne.n	80029aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e09a      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800298a:	4b4e      	ldr	r3, [pc, #312]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d109      	bne.n	80029aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e08e      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800299a:	4b4a      	ldr	r3, [pc, #296]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e086      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029aa:	4b46      	ldr	r3, [pc, #280]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f023 0203 	bic.w	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	4943      	ldr	r1, [pc, #268]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029bc:	f7fe fa38 	bl	8000e30 <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c2:	e00a      	b.n	80029da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c4:	f7fe fa34 	bl	8000e30 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e06e      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	4b3a      	ldr	r3, [pc, #232]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 020c 	and.w	r2, r3, #12
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d1eb      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d010      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	4b31      	ldr	r3, [pc, #196]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d208      	bcs.n	8002a1a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a08:	4b2e      	ldr	r3, [pc, #184]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	492b      	ldr	r1, [pc, #172]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a1a:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d210      	bcs.n	8002a4a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a28:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 0207 	bic.w	r2, r3, #7
 8002a30:	4923      	ldr	r1, [pc, #140]	; (8002ac0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a38:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d001      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e036      	b.n	8002ab8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d008      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a56:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	4918      	ldr	r1, [pc, #96]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d009      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a74:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4910      	ldr	r1, [pc, #64]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a88:	f000 f824 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	490b      	ldr	r1, [pc, #44]	; (8002ac8 <HAL_RCC_ClockConfig+0x1f4>)
 8002a9a:	5ccb      	ldrb	r3, [r1, r3]
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa4:	4a09      	ldr	r2, [pc, #36]	; (8002acc <HAL_RCC_ClockConfig+0x1f8>)
 8002aa6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002aa8:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_RCC_ClockConfig+0x1fc>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fe f96f 	bl	8000d90 <HAL_InitTick>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ab6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40022000 	.word	0x40022000
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	0800404c 	.word	0x0800404c
 8002acc:	20000004 	.word	0x20000004
 8002ad0:	20000008 	.word	0x20000008

08002ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	; 0x24
 8002ad8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae2:	4b3e      	ldr	r3, [pc, #248]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aec:	4b3b      	ldr	r3, [pc, #236]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0x34>
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	2b0c      	cmp	r3, #12
 8002b00:	d121      	bne.n	8002b46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d11e      	bne.n	8002b46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b08:	4b34      	ldr	r3, [pc, #208]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b14:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	e005      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b24:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b30:	4a2b      	ldr	r2, [pc, #172]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10d      	bne.n	8002b5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b44:	e00a      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d102      	bne.n	8002b52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b4c:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	e004      	b.n	8002b5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d101      	bne.n	8002b5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b58:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	2b0c      	cmp	r3, #12
 8002b60:	d134      	bne.n	8002bcc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b62:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d003      	beq.n	8002b7a <HAL_RCC_GetSysClockFreq+0xa6>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d003      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0xac>
 8002b78:	e005      	b.n	8002b86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b7c:	617b      	str	r3, [r7, #20]
      break;
 8002b7e:	e005      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b80:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b82:	617b      	str	r3, [r7, #20]
      break;
 8002b84:	e002      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	617b      	str	r3, [r7, #20]
      break;
 8002b8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	3301      	adds	r3, #1
 8002b98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	fb03 f202 	mul.w	r2, r3, r2
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	0e5b      	lsrs	r3, r3, #25
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3724      	adds	r7, #36	; 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	0800405c 	.word	0x0800405c
 8002be4:	00f42400 	.word	0x00f42400
 8002be8:	007a1200 	.word	0x007a1200

08002bec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bf8:	4b2a      	ldr	r3, [pc, #168]	; (8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c04:	f7ff f9d8 	bl	8001fb8 <HAL_PWREx_GetVoltageRange>
 8002c08:	6178      	str	r0, [r7, #20]
 8002c0a:	e014      	b.n	8002c36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c0c:	4b25      	ldr	r3, [pc, #148]	; (8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	4a24      	ldr	r2, [pc, #144]	; (8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c16:	6593      	str	r3, [r2, #88]	; 0x58
 8002c18:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c24:	f7ff f9c8 	bl	8001fb8 <HAL_PWREx_GetVoltageRange>
 8002c28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c3c:	d10b      	bne.n	8002c56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b80      	cmp	r3, #128	; 0x80
 8002c42:	d919      	bls.n	8002c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2ba0      	cmp	r3, #160	; 0xa0
 8002c48:	d902      	bls.n	8002c50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	e013      	b.n	8002c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c50:	2301      	movs	r3, #1
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	e010      	b.n	8002c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b80      	cmp	r3, #128	; 0x80
 8002c5a:	d902      	bls.n	8002c62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	e00a      	b.n	8002c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b80      	cmp	r3, #128	; 0x80
 8002c66:	d102      	bne.n	8002c6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c68:	2302      	movs	r3, #2
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	e004      	b.n	8002c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b70      	cmp	r3, #112	; 0x70
 8002c72:	d101      	bne.n	8002c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c74:	2301      	movs	r3, #1
 8002c76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f023 0207 	bic.w	r2, r3, #7
 8002c80:	4909      	ldr	r1, [pc, #36]	; (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c88:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d001      	beq.n	8002c9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40022000 	.word	0x40022000

08002cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cb8:	2300      	movs	r3, #0
 8002cba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d041      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ccc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cd0:	d02a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002cd2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002cd6:	d824      	bhi.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cdc:	d008      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ce2:	d81e      	bhi.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cec:	d010      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002cee:	e018      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cf0:	4b86      	ldr	r3, [pc, #536]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a85      	ldr	r2, [pc, #532]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cfc:	e015      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3304      	adds	r3, #4
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 facd 	bl	80032a4 <RCCEx_PLLSAI1_Config>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d0e:	e00c      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3320      	adds	r3, #32
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fbb6 	bl	8003488 <RCCEx_PLLSAI2_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d20:	e003      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	74fb      	strb	r3, [r7, #19]
      break;
 8002d26:	e000      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10b      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d30:	4b76      	ldr	r3, [pc, #472]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d3e:	4973      	ldr	r1, [pc, #460]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d46:	e001      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d48:	7cfb      	ldrb	r3, [r7, #19]
 8002d4a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d041      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d60:	d02a      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d66:	d824      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d6c:	d008      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d72:	d81e      	bhi.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d7c:	d010      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d7e:	e018      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d80:	4b62      	ldr	r3, [pc, #392]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	4a61      	ldr	r2, [pc, #388]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d8c:	e015      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3304      	adds	r3, #4
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 fa85 	bl	80032a4 <RCCEx_PLLSAI1_Config>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d9e:	e00c      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3320      	adds	r3, #32
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 fb6e 	bl	8003488 <RCCEx_PLLSAI2_Config>
 8002dac:	4603      	mov	r3, r0
 8002dae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002db0:	e003      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	74fb      	strb	r3, [r7, #19]
      break;
 8002db6:	e000      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dba:	7cfb      	ldrb	r3, [r7, #19]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10b      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dc0:	4b52      	ldr	r3, [pc, #328]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dce:	494f      	ldr	r1, [pc, #316]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002dd6:	e001      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd8:	7cfb      	ldrb	r3, [r7, #19]
 8002dda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80a0 	beq.w	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dea:	2300      	movs	r3, #0
 8002dec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dee:	4b47      	ldr	r3, [pc, #284]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00d      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e04:	4b41      	ldr	r3, [pc, #260]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	4a40      	ldr	r2, [pc, #256]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e10:	4b3e      	ldr	r3, [pc, #248]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e20:	4b3b      	ldr	r3, [pc, #236]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a3a      	ldr	r2, [pc, #232]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e2c:	f7fe f800 	bl	8000e30 <HAL_GetTick>
 8002e30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e32:	e009      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e34:	f7fd fffc 	bl	8000e30 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d902      	bls.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	74fb      	strb	r3, [r7, #19]
        break;
 8002e46:	e005      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e48:	4b31      	ldr	r3, [pc, #196]	; (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0ef      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e54:	7cfb      	ldrb	r3, [r7, #19]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d15c      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e5a:	4b2c      	ldr	r3, [pc, #176]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01f      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d019      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e78:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e84:	4b21      	ldr	r3, [pc, #132]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	4a20      	ldr	r2, [pc, #128]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e94:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9a:	4a1c      	ldr	r2, [pc, #112]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ea4:	4a19      	ldr	r2, [pc, #100]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d016      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb6:	f7fd ffbb 	bl	8000e30 <HAL_GetTick>
 8002eba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ebc:	e00b      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ebe:	f7fd ffb7 	bl	8000e30 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d902      	bls.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ed4:	e006      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0ec      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ee4:	7cfb      	ldrb	r3, [r7, #19]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efa:	4904      	ldr	r1, [pc, #16]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f02:	e009      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
 8002f06:	74bb      	strb	r3, [r7, #18]
 8002f08:	e006      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f0a:	bf00      	nop
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f18:	7c7b      	ldrb	r3, [r7, #17]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d105      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f1e:	4ba6      	ldr	r3, [pc, #664]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f22:	4aa5      	ldr	r2, [pc, #660]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f36:	4ba0      	ldr	r3, [pc, #640]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3c:	f023 0203 	bic.w	r2, r3, #3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	499c      	ldr	r1, [pc, #624]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f58:	4b97      	ldr	r3, [pc, #604]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	f023 020c 	bic.w	r2, r3, #12
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f66:	4994      	ldr	r1, [pc, #592]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f7a:	4b8f      	ldr	r3, [pc, #572]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	498b      	ldr	r1, [pc, #556]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00a      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f9c:	4b86      	ldr	r3, [pc, #536]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	4983      	ldr	r1, [pc, #524]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fbe:	4b7e      	ldr	r3, [pc, #504]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fcc:	497a      	ldr	r1, [pc, #488]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fe0:	4b75      	ldr	r3, [pc, #468]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fee:	4972      	ldr	r1, [pc, #456]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d00a      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003002:	4b6d      	ldr	r3, [pc, #436]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003008:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003010:	4969      	ldr	r1, [pc, #420]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003024:	4b64      	ldr	r3, [pc, #400]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003032:	4961      	ldr	r1, [pc, #388]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00a      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003046:	4b5c      	ldr	r3, [pc, #368]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003054:	4958      	ldr	r1, [pc, #352]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00a      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003068:	4b53      	ldr	r3, [pc, #332]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003076:	4950      	ldr	r1, [pc, #320]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800308a:	4b4b      	ldr	r3, [pc, #300]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800308c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003090:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	4947      	ldr	r1, [pc, #284]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030ac:	4b42      	ldr	r3, [pc, #264]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030b2:	f023 0203 	bic.w	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ba:	493f      	ldr	r1, [pc, #252]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d028      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030ce:	4b3a      	ldr	r3, [pc, #232]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030dc:	4936      	ldr	r1, [pc, #216]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030ec:	d106      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030ee:	4b32      	ldr	r3, [pc, #200]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	4a31      	ldr	r2, [pc, #196]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030f8:	60d3      	str	r3, [r2, #12]
 80030fa:	e011      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003100:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003104:	d10c      	bne.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3304      	adds	r3, #4
 800310a:	2101      	movs	r1, #1
 800310c:	4618      	mov	r0, r3
 800310e:	f000 f8c9 	bl	80032a4 <RCCEx_PLLSAI1_Config>
 8003112:	4603      	mov	r3, r0
 8003114:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003116:	7cfb      	ldrb	r3, [r7, #19]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800311c:	7cfb      	ldrb	r3, [r7, #19]
 800311e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d028      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800312c:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003132:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313a:	491f      	ldr	r1, [pc, #124]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003146:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800314a:	d106      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800314c:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003156:	60d3      	str	r3, [r2, #12]
 8003158:	e011      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800315e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003162:	d10c      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3304      	adds	r3, #4
 8003168:	2101      	movs	r1, #1
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f89a 	bl	80032a4 <RCCEx_PLLSAI1_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003174:	7cfb      	ldrb	r3, [r7, #19]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800317a:	7cfb      	ldrb	r3, [r7, #19]
 800317c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d02a      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800318a:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800318c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003190:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003198:	4907      	ldr	r1, [pc, #28]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031a8:	d108      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031aa:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	4a02      	ldr	r2, [pc, #8]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031b4:	60d3      	str	r3, [r2, #12]
 80031b6:	e013      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80031b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3304      	adds	r3, #4
 80031ca:	2101      	movs	r1, #1
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 f869 	bl	80032a4 <RCCEx_PLLSAI1_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031d6:	7cfb      	ldrb	r3, [r7, #19]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80031dc:	7cfb      	ldrb	r3, [r7, #19]
 80031de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d02f      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031ec:	4b2c      	ldr	r3, [pc, #176]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031fa:	4929      	ldr	r1, [pc, #164]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003206:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800320a:	d10d      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3304      	adds	r3, #4
 8003210:	2102      	movs	r1, #2
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f846 	bl	80032a4 <RCCEx_PLLSAI1_Config>
 8003218:	4603      	mov	r3, r0
 800321a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800321c:	7cfb      	ldrb	r3, [r7, #19]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d014      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003222:	7cfb      	ldrb	r3, [r7, #19]
 8003224:	74bb      	strb	r3, [r7, #18]
 8003226:	e011      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800322c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003230:	d10c      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3320      	adds	r3, #32
 8003236:	2102      	movs	r1, #2
 8003238:	4618      	mov	r0, r3
 800323a:	f000 f925 	bl	8003488 <RCCEx_PLLSAI2_Config>
 800323e:	4603      	mov	r3, r0
 8003240:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003242:	7cfb      	ldrb	r3, [r7, #19]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003248:	7cfb      	ldrb	r3, [r7, #19]
 800324a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00b      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003268:	490d      	ldr	r1, [pc, #52]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00b      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800327c:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800328c:	4904      	ldr	r1, [pc, #16]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003294:	7cbb      	ldrb	r3, [r7, #18]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000

080032a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032b2:	4b74      	ldr	r3, [pc, #464]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d018      	beq.n	80032f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032be:	4b71      	ldr	r3, [pc, #452]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f003 0203 	and.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d10d      	bne.n	80032ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
       ||
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032d6:	4b6b      	ldr	r3, [pc, #428]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	091b      	lsrs	r3, r3, #4
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
       ||
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d047      	beq.n	800337a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	73fb      	strb	r3, [r7, #15]
 80032ee:	e044      	b.n	800337a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d018      	beq.n	800332a <RCCEx_PLLSAI1_Config+0x86>
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d825      	bhi.n	8003348 <RCCEx_PLLSAI1_Config+0xa4>
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d002      	beq.n	8003306 <RCCEx_PLLSAI1_Config+0x62>
 8003300:	2b02      	cmp	r3, #2
 8003302:	d009      	beq.n	8003318 <RCCEx_PLLSAI1_Config+0x74>
 8003304:	e020      	b.n	8003348 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003306:	4b5f      	ldr	r3, [pc, #380]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d11d      	bne.n	800334e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003316:	e01a      	b.n	800334e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003318:	4b5a      	ldr	r3, [pc, #360]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003320:	2b00      	cmp	r3, #0
 8003322:	d116      	bne.n	8003352 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003328:	e013      	b.n	8003352 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800332a:	4b56      	ldr	r3, [pc, #344]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10f      	bne.n	8003356 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003336:	4b53      	ldr	r3, [pc, #332]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d109      	bne.n	8003356 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003346:	e006      	b.n	8003356 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
      break;
 800334c:	e004      	b.n	8003358 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800334e:	bf00      	nop
 8003350:	e002      	b.n	8003358 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003352:	bf00      	nop
 8003354:	e000      	b.n	8003358 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003356:	bf00      	nop
    }

    if(status == HAL_OK)
 8003358:	7bfb      	ldrb	r3, [r7, #15]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10d      	bne.n	800337a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800335e:	4b49      	ldr	r3, [pc, #292]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6819      	ldr	r1, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	3b01      	subs	r3, #1
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	430b      	orrs	r3, r1
 8003374:	4943      	ldr	r1, [pc, #268]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003376:	4313      	orrs	r3, r2
 8003378:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d17c      	bne.n	800347a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003380:	4b40      	ldr	r3, [pc, #256]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a3f      	ldr	r2, [pc, #252]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003386:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800338a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800338c:	f7fd fd50 	bl	8000e30 <HAL_GetTick>
 8003390:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003392:	e009      	b.n	80033a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003394:	f7fd fd4c 	bl	8000e30 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d902      	bls.n	80033a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	73fb      	strb	r3, [r7, #15]
        break;
 80033a6:	e005      	b.n	80033b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033a8:	4b36      	ldr	r3, [pc, #216]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1ef      	bne.n	8003394 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d15f      	bne.n	800347a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d110      	bne.n	80033e2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033c0:	4b30      	ldr	r3, [pc, #192]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80033c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6892      	ldr	r2, [r2, #8]
 80033d0:	0211      	lsls	r1, r2, #8
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68d2      	ldr	r2, [r2, #12]
 80033d6:	06d2      	lsls	r2, r2, #27
 80033d8:	430a      	orrs	r2, r1
 80033da:	492a      	ldr	r1, [pc, #168]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	610b      	str	r3, [r1, #16]
 80033e0:	e027      	b.n	8003432 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d112      	bne.n	800340e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033e8:	4b26      	ldr	r3, [pc, #152]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6892      	ldr	r2, [r2, #8]
 80033f8:	0211      	lsls	r1, r2, #8
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6912      	ldr	r2, [r2, #16]
 80033fe:	0852      	lsrs	r2, r2, #1
 8003400:	3a01      	subs	r2, #1
 8003402:	0552      	lsls	r2, r2, #21
 8003404:	430a      	orrs	r2, r1
 8003406:	491f      	ldr	r1, [pc, #124]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003408:	4313      	orrs	r3, r2
 800340a:	610b      	str	r3, [r1, #16]
 800340c:	e011      	b.n	8003432 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800340e:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003416:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6892      	ldr	r2, [r2, #8]
 800341e:	0211      	lsls	r1, r2, #8
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6952      	ldr	r2, [r2, #20]
 8003424:	0852      	lsrs	r2, r2, #1
 8003426:	3a01      	subs	r2, #1
 8003428:	0652      	lsls	r2, r2, #25
 800342a:	430a      	orrs	r2, r1
 800342c:	4915      	ldr	r1, [pc, #84]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 800342e:	4313      	orrs	r3, r2
 8003430:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003432:	4b14      	ldr	r3, [pc, #80]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a13      	ldr	r2, [pc, #76]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003438:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800343c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343e:	f7fd fcf7 	bl	8000e30 <HAL_GetTick>
 8003442:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003444:	e009      	b.n	800345a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003446:	f7fd fcf3 	bl	8000e30 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d902      	bls.n	800345a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	73fb      	strb	r3, [r7, #15]
          break;
 8003458:	e005      	b.n	8003466 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0ef      	beq.n	8003446 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	4903      	ldr	r1, [pc, #12]	; (8003484 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003476:	4313      	orrs	r3, r2
 8003478:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800347a:	7bfb      	ldrb	r3, [r7, #15]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40021000 	.word	0x40021000

08003488 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003496:	4b69      	ldr	r3, [pc, #420]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d018      	beq.n	80034d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034a2:	4b66      	ldr	r3, [pc, #408]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0203 	and.w	r2, r3, #3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d10d      	bne.n	80034ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
       ||
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034ba:	4b60      	ldr	r3, [pc, #384]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	091b      	lsrs	r3, r3, #4
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
       ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d047      	beq.n	800355e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
 80034d2:	e044      	b.n	800355e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d018      	beq.n	800350e <RCCEx_PLLSAI2_Config+0x86>
 80034dc:	2b03      	cmp	r3, #3
 80034de:	d825      	bhi.n	800352c <RCCEx_PLLSAI2_Config+0xa4>
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d002      	beq.n	80034ea <RCCEx_PLLSAI2_Config+0x62>
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d009      	beq.n	80034fc <RCCEx_PLLSAI2_Config+0x74>
 80034e8:	e020      	b.n	800352c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034ea:	4b54      	ldr	r3, [pc, #336]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d11d      	bne.n	8003532 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034fa:	e01a      	b.n	8003532 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034fc:	4b4f      	ldr	r3, [pc, #316]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003504:	2b00      	cmp	r3, #0
 8003506:	d116      	bne.n	8003536 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350c:	e013      	b.n	8003536 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800350e:	4b4b      	ldr	r3, [pc, #300]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10f      	bne.n	800353a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800351a:	4b48      	ldr	r3, [pc, #288]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800352a:	e006      	b.n	800353a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
      break;
 8003530:	e004      	b.n	800353c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003532:	bf00      	nop
 8003534:	e002      	b.n	800353c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003536:	bf00      	nop
 8003538:	e000      	b.n	800353c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800353a:	bf00      	nop
    }

    if(status == HAL_OK)
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10d      	bne.n	800355e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003542:	4b3e      	ldr	r3, [pc, #248]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6819      	ldr	r1, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	430b      	orrs	r3, r1
 8003558:	4938      	ldr	r1, [pc, #224]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 800355a:	4313      	orrs	r3, r2
 800355c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d166      	bne.n	8003632 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003564:	4b35      	ldr	r3, [pc, #212]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a34      	ldr	r2, [pc, #208]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 800356a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800356e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003570:	f7fd fc5e 	bl	8000e30 <HAL_GetTick>
 8003574:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003576:	e009      	b.n	800358c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003578:	f7fd fc5a 	bl	8000e30 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d902      	bls.n	800358c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	73fb      	strb	r3, [r7, #15]
        break;
 800358a:	e005      	b.n	8003598 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800358c:	4b2b      	ldr	r3, [pc, #172]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ef      	bne.n	8003578 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d149      	bne.n	8003632 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d110      	bne.n	80035c6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035a4:	4b25      	ldr	r3, [pc, #148]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80035ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6892      	ldr	r2, [r2, #8]
 80035b4:	0211      	lsls	r1, r2, #8
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68d2      	ldr	r2, [r2, #12]
 80035ba:	06d2      	lsls	r2, r2, #27
 80035bc:	430a      	orrs	r2, r1
 80035be:	491f      	ldr	r1, [pc, #124]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	614b      	str	r3, [r1, #20]
 80035c4:	e011      	b.n	80035ea <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035c6:	4b1d      	ldr	r3, [pc, #116]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6892      	ldr	r2, [r2, #8]
 80035d6:	0211      	lsls	r1, r2, #8
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6912      	ldr	r2, [r2, #16]
 80035dc:	0852      	lsrs	r2, r2, #1
 80035de:	3a01      	subs	r2, #1
 80035e0:	0652      	lsls	r2, r2, #25
 80035e2:	430a      	orrs	r2, r1
 80035e4:	4915      	ldr	r1, [pc, #84]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035ea:	4b14      	ldr	r3, [pc, #80]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a13      	ldr	r2, [pc, #76]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f6:	f7fd fc1b 	bl	8000e30 <HAL_GetTick>
 80035fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035fc:	e009      	b.n	8003612 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035fe:	f7fd fc17 	bl	8000e30 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d902      	bls.n	8003612 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	73fb      	strb	r3, [r7, #15]
          break;
 8003610:	e005      	b.n	800361e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003612:	4b0a      	ldr	r3, [pc, #40]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0ef      	beq.n	80035fe <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d106      	bne.n	8003632 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003624:	4b05      	ldr	r3, [pc, #20]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	4903      	ldr	r1, [pc, #12]	; (800363c <RCCEx_PLLSAI2_Config+0x1b4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003632:	7bfb      	ldrb	r3, [r7, #15]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40021000 	.word	0x40021000

08003640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e049      	b.n	80036e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd fae6 	bl	8000c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	4619      	mov	r1, r3
 800367e:	4610      	mov	r0, r2
 8003680:	f000 fab6 	bl	8003bf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	d001      	beq.n	8003708 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e04f      	b.n	80037a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a23      	ldr	r2, [pc, #140]	; (80037b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d01d      	beq.n	8003766 <HAL_TIM_Base_Start_IT+0x76>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003732:	d018      	beq.n	8003766 <HAL_TIM_Base_Start_IT+0x76>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1f      	ldr	r2, [pc, #124]	; (80037b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d013      	beq.n	8003766 <HAL_TIM_Base_Start_IT+0x76>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1e      	ldr	r2, [pc, #120]	; (80037bc <HAL_TIM_Base_Start_IT+0xcc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00e      	beq.n	8003766 <HAL_TIM_Base_Start_IT+0x76>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1c      	ldr	r2, [pc, #112]	; (80037c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d009      	beq.n	8003766 <HAL_TIM_Base_Start_IT+0x76>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a1b      	ldr	r2, [pc, #108]	; (80037c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d004      	beq.n	8003766 <HAL_TIM_Base_Start_IT+0x76>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a19      	ldr	r2, [pc, #100]	; (80037c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d115      	bne.n	8003792 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	4b17      	ldr	r3, [pc, #92]	; (80037cc <HAL_TIM_Base_Start_IT+0xdc>)
 800376e:	4013      	ands	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b06      	cmp	r3, #6
 8003776:	d015      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0xb4>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377e:	d011      	beq.n	80037a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003790:	e008      	b.n	80037a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0201 	orr.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e000      	b.n	80037a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	40012c00 	.word	0x40012c00
 80037b8:	40000400 	.word	0x40000400
 80037bc:	40000800 	.word	0x40000800
 80037c0:	40000c00 	.word	0x40000c00
 80037c4:	40013400 	.word	0x40013400
 80037c8:	40014000 	.word	0x40014000
 80037cc:	00010007 	.word	0x00010007

080037d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d122      	bne.n	800382c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d11b      	bne.n	800382c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0202 	mvn.w	r2, #2
 80037fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f9ce 	bl	8003bb4 <HAL_TIM_IC_CaptureCallback>
 8003818:	e005      	b.n	8003826 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f9c0 	bl	8003ba0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f9d1 	bl	8003bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b04      	cmp	r3, #4
 8003838:	d122      	bne.n	8003880 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b04      	cmp	r3, #4
 8003846:	d11b      	bne.n	8003880 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0204 	mvn.w	r2, #4
 8003850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2202      	movs	r2, #2
 8003856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f9a4 	bl	8003bb4 <HAL_TIM_IC_CaptureCallback>
 800386c:	e005      	b.n	800387a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f996 	bl	8003ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f9a7 	bl	8003bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b08      	cmp	r3, #8
 800388c:	d122      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b08      	cmp	r3, #8
 800389a:	d11b      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0208 	mvn.w	r2, #8
 80038a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2204      	movs	r2, #4
 80038aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f97a 	bl	8003bb4 <HAL_TIM_IC_CaptureCallback>
 80038c0:	e005      	b.n	80038ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f96c 	bl	8003ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f97d 	bl	8003bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	2b10      	cmp	r3, #16
 80038e0:	d122      	bne.n	8003928 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b10      	cmp	r3, #16
 80038ee:	d11b      	bne.n	8003928 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0210 	mvn.w	r2, #16
 80038f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2208      	movs	r2, #8
 80038fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f950 	bl	8003bb4 <HAL_TIM_IC_CaptureCallback>
 8003914:	e005      	b.n	8003922 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f942 	bl	8003ba0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f953 	bl	8003bc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b01      	cmp	r3, #1
 8003934:	d10e      	bne.n	8003954 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d107      	bne.n	8003954 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0201 	mvn.w	r2, #1
 800394c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fd f8c4 	bl	8000adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	2b80      	cmp	r3, #128	; 0x80
 8003960:	d10e      	bne.n	8003980 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396c:	2b80      	cmp	r3, #128	; 0x80
 800396e:	d107      	bne.n	8003980 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fafe 	bl	8003f7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800398e:	d10e      	bne.n	80039ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399a:	2b80      	cmp	r3, #128	; 0x80
 800399c:	d107      	bne.n	80039ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 faf1 	bl	8003f90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b8:	2b40      	cmp	r3, #64	; 0x40
 80039ba:	d10e      	bne.n	80039da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d107      	bne.n	80039da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f901 	bl	8003bdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d10e      	bne.n	8003a06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b20      	cmp	r3, #32
 80039f4:	d107      	bne.n	8003a06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f06f 0220 	mvn.w	r2, #32
 80039fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fab1 	bl	8003f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_TIM_ConfigClockSource+0x1c>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e0b6      	b.n	8003b98 <HAL_TIM_ConfigClockSource+0x18a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2202      	movs	r2, #2
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a48:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a4c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a54:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a66:	d03e      	beq.n	8003ae6 <HAL_TIM_ConfigClockSource+0xd8>
 8003a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6c:	f200 8087 	bhi.w	8003b7e <HAL_TIM_ConfigClockSource+0x170>
 8003a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a74:	f000 8086 	beq.w	8003b84 <HAL_TIM_ConfigClockSource+0x176>
 8003a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7c:	d87f      	bhi.n	8003b7e <HAL_TIM_ConfigClockSource+0x170>
 8003a7e:	2b70      	cmp	r3, #112	; 0x70
 8003a80:	d01a      	beq.n	8003ab8 <HAL_TIM_ConfigClockSource+0xaa>
 8003a82:	2b70      	cmp	r3, #112	; 0x70
 8003a84:	d87b      	bhi.n	8003b7e <HAL_TIM_ConfigClockSource+0x170>
 8003a86:	2b60      	cmp	r3, #96	; 0x60
 8003a88:	d050      	beq.n	8003b2c <HAL_TIM_ConfigClockSource+0x11e>
 8003a8a:	2b60      	cmp	r3, #96	; 0x60
 8003a8c:	d877      	bhi.n	8003b7e <HAL_TIM_ConfigClockSource+0x170>
 8003a8e:	2b50      	cmp	r3, #80	; 0x50
 8003a90:	d03c      	beq.n	8003b0c <HAL_TIM_ConfigClockSource+0xfe>
 8003a92:	2b50      	cmp	r3, #80	; 0x50
 8003a94:	d873      	bhi.n	8003b7e <HAL_TIM_ConfigClockSource+0x170>
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d058      	beq.n	8003b4c <HAL_TIM_ConfigClockSource+0x13e>
 8003a9a:	2b40      	cmp	r3, #64	; 0x40
 8003a9c:	d86f      	bhi.n	8003b7e <HAL_TIM_ConfigClockSource+0x170>
 8003a9e:	2b30      	cmp	r3, #48	; 0x30
 8003aa0:	d064      	beq.n	8003b6c <HAL_TIM_ConfigClockSource+0x15e>
 8003aa2:	2b30      	cmp	r3, #48	; 0x30
 8003aa4:	d86b      	bhi.n	8003b7e <HAL_TIM_ConfigClockSource+0x170>
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d060      	beq.n	8003b6c <HAL_TIM_ConfigClockSource+0x15e>
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d867      	bhi.n	8003b7e <HAL_TIM_ConfigClockSource+0x170>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d05c      	beq.n	8003b6c <HAL_TIM_ConfigClockSource+0x15e>
 8003ab2:	2b10      	cmp	r3, #16
 8003ab4:	d05a      	beq.n	8003b6c <HAL_TIM_ConfigClockSource+0x15e>
 8003ab6:	e062      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	6899      	ldr	r1, [r3, #8]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f000 f9a6 	bl	8003e18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ada:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	609a      	str	r2, [r3, #8]
      break;
 8003ae4:	e04f      	b.n	8003b86 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	6899      	ldr	r1, [r3, #8]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f000 f98f 	bl	8003e18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b08:	609a      	str	r2, [r3, #8]
      break;
 8003b0a:	e03c      	b.n	8003b86 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	6859      	ldr	r1, [r3, #4]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f000 f903 	bl	8003d24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2150      	movs	r1, #80	; 0x50
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 f95c 	bl	8003de2 <TIM_ITRx_SetConfig>
      break;
 8003b2a:	e02c      	b.n	8003b86 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6818      	ldr	r0, [r3, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	6859      	ldr	r1, [r3, #4]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	f000 f922 	bl	8003d82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2160      	movs	r1, #96	; 0x60
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 f94c 	bl	8003de2 <TIM_ITRx_SetConfig>
      break;
 8003b4a:	e01c      	b.n	8003b86 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	6859      	ldr	r1, [r3, #4]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f000 f8e3 	bl	8003d24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2140      	movs	r1, #64	; 0x40
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 f93c 	bl	8003de2 <TIM_ITRx_SetConfig>
      break;
 8003b6a:	e00c      	b.n	8003b86 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4619      	mov	r1, r3
 8003b76:	4610      	mov	r0, r2
 8003b78:	f000 f933 	bl	8003de2 <TIM_ITRx_SetConfig>
      break;
 8003b7c:	e003      	b.n	8003b86 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
      break;
 8003b82:	e000      	b.n	8003b86 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a40      	ldr	r2, [pc, #256]	; (8003d04 <TIM_Base_SetConfig+0x114>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d013      	beq.n	8003c30 <TIM_Base_SetConfig+0x40>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0e:	d00f      	beq.n	8003c30 <TIM_Base_SetConfig+0x40>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a3d      	ldr	r2, [pc, #244]	; (8003d08 <TIM_Base_SetConfig+0x118>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00b      	beq.n	8003c30 <TIM_Base_SetConfig+0x40>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a3c      	ldr	r2, [pc, #240]	; (8003d0c <TIM_Base_SetConfig+0x11c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d007      	beq.n	8003c30 <TIM_Base_SetConfig+0x40>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a3b      	ldr	r2, [pc, #236]	; (8003d10 <TIM_Base_SetConfig+0x120>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <TIM_Base_SetConfig+0x40>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a3a      	ldr	r2, [pc, #232]	; (8003d14 <TIM_Base_SetConfig+0x124>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d108      	bne.n	8003c42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a2f      	ldr	r2, [pc, #188]	; (8003d04 <TIM_Base_SetConfig+0x114>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d01f      	beq.n	8003c8a <TIM_Base_SetConfig+0x9a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c50:	d01b      	beq.n	8003c8a <TIM_Base_SetConfig+0x9a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a2c      	ldr	r2, [pc, #176]	; (8003d08 <TIM_Base_SetConfig+0x118>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d017      	beq.n	8003c8a <TIM_Base_SetConfig+0x9a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a2b      	ldr	r2, [pc, #172]	; (8003d0c <TIM_Base_SetConfig+0x11c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <TIM_Base_SetConfig+0x9a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a2a      	ldr	r2, [pc, #168]	; (8003d10 <TIM_Base_SetConfig+0x120>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00f      	beq.n	8003c8a <TIM_Base_SetConfig+0x9a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a29      	ldr	r2, [pc, #164]	; (8003d14 <TIM_Base_SetConfig+0x124>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00b      	beq.n	8003c8a <TIM_Base_SetConfig+0x9a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a28      	ldr	r2, [pc, #160]	; (8003d18 <TIM_Base_SetConfig+0x128>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d007      	beq.n	8003c8a <TIM_Base_SetConfig+0x9a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a27      	ldr	r2, [pc, #156]	; (8003d1c <TIM_Base_SetConfig+0x12c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d003      	beq.n	8003c8a <TIM_Base_SetConfig+0x9a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a26      	ldr	r2, [pc, #152]	; (8003d20 <TIM_Base_SetConfig+0x130>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d108      	bne.n	8003c9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a10      	ldr	r2, [pc, #64]	; (8003d04 <TIM_Base_SetConfig+0x114>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00f      	beq.n	8003ce8 <TIM_Base_SetConfig+0xf8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a12      	ldr	r2, [pc, #72]	; (8003d14 <TIM_Base_SetConfig+0x124>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00b      	beq.n	8003ce8 <TIM_Base_SetConfig+0xf8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a11      	ldr	r2, [pc, #68]	; (8003d18 <TIM_Base_SetConfig+0x128>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d007      	beq.n	8003ce8 <TIM_Base_SetConfig+0xf8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a10      	ldr	r2, [pc, #64]	; (8003d1c <TIM_Base_SetConfig+0x12c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_Base_SetConfig+0xf8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a0f      	ldr	r2, [pc, #60]	; (8003d20 <TIM_Base_SetConfig+0x130>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d103      	bne.n	8003cf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	615a      	str	r2, [r3, #20]
}
 8003cf6:	bf00      	nop
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40012c00 	.word	0x40012c00
 8003d08:	40000400 	.word	0x40000400
 8003d0c:	40000800 	.word	0x40000800
 8003d10:	40000c00 	.word	0x40000c00
 8003d14:	40013400 	.word	0x40013400
 8003d18:	40014000 	.word	0x40014000
 8003d1c:	40014400 	.word	0x40014400
 8003d20:	40014800 	.word	0x40014800

08003d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	f023 0201 	bic.w	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f023 030a 	bic.w	r3, r3, #10
 8003d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	621a      	str	r2, [r3, #32]
}
 8003d76:	bf00      	nop
 8003d78:	371c      	adds	r7, #28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b087      	sub	sp, #28
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	f023 0210 	bic.w	r2, r3, #16
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003dac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	031b      	lsls	r3, r3, #12
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003dbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	621a      	str	r2, [r3, #32]
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b085      	sub	sp, #20
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f043 0307 	orr.w	r3, r3, #7
 8003e04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	609a      	str	r2, [r3, #8]
}
 8003e0c:	bf00      	nop
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b087      	sub	sp, #28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	021a      	lsls	r2, r3, #8
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	609a      	str	r2, [r3, #8]
}
 8003e4c:	bf00      	nop
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e068      	b.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a2e      	ldr	r2, [pc, #184]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a2d      	ldr	r2, [pc, #180]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d108      	bne.n	8003eb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003eaa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d01d      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee2:	d018      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a1b      	ldr	r2, [pc, #108]	; (8003f58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d013      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a1a      	ldr	r2, [pc, #104]	; (8003f5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00e      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a18      	ldr	r2, [pc, #96]	; (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d009      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a13      	ldr	r2, [pc, #76]	; (8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d004      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a14      	ldr	r2, [pc, #80]	; (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d10c      	bne.n	8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3714      	adds	r7, #20
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	40013400 	.word	0x40013400
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800
 8003f60:	40000c00 	.word	0x40000c00
 8003f64:	40014000 	.word	0x40014000

08003f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <__libc_init_array>:
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	4d0d      	ldr	r5, [pc, #52]	; (8003fdc <__libc_init_array+0x38>)
 8003fa8:	4c0d      	ldr	r4, [pc, #52]	; (8003fe0 <__libc_init_array+0x3c>)
 8003faa:	1b64      	subs	r4, r4, r5
 8003fac:	10a4      	asrs	r4, r4, #2
 8003fae:	2600      	movs	r6, #0
 8003fb0:	42a6      	cmp	r6, r4
 8003fb2:	d109      	bne.n	8003fc8 <__libc_init_array+0x24>
 8003fb4:	4d0b      	ldr	r5, [pc, #44]	; (8003fe4 <__libc_init_array+0x40>)
 8003fb6:	4c0c      	ldr	r4, [pc, #48]	; (8003fe8 <__libc_init_array+0x44>)
 8003fb8:	f000 f820 	bl	8003ffc <_init>
 8003fbc:	1b64      	subs	r4, r4, r5
 8003fbe:	10a4      	asrs	r4, r4, #2
 8003fc0:	2600      	movs	r6, #0
 8003fc2:	42a6      	cmp	r6, r4
 8003fc4:	d105      	bne.n	8003fd2 <__libc_init_array+0x2e>
 8003fc6:	bd70      	pop	{r4, r5, r6, pc}
 8003fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fcc:	4798      	blx	r3
 8003fce:	3601      	adds	r6, #1
 8003fd0:	e7ee      	b.n	8003fb0 <__libc_init_array+0xc>
 8003fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd6:	4798      	blx	r3
 8003fd8:	3601      	adds	r6, #1
 8003fda:	e7f2      	b.n	8003fc2 <__libc_init_array+0x1e>
 8003fdc:	0800408c 	.word	0x0800408c
 8003fe0:	0800408c 	.word	0x0800408c
 8003fe4:	0800408c 	.word	0x0800408c
 8003fe8:	08004090 	.word	0x08004090

08003fec <memset>:
 8003fec:	4402      	add	r2, r0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d100      	bne.n	8003ff6 <memset+0xa>
 8003ff4:	4770      	bx	lr
 8003ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8003ffa:	e7f9      	b.n	8003ff0 <memset+0x4>

08003ffc <_init>:
 8003ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffe:	bf00      	nop
 8004000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004002:	bc08      	pop	{r3}
 8004004:	469e      	mov	lr, r3
 8004006:	4770      	bx	lr

08004008 <_fini>:
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	bf00      	nop
 800400c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400e:	bc08      	pop	{r3}
 8004010:	469e      	mov	lr, r3
 8004012:	4770      	bx	lr
