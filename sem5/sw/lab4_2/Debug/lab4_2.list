
lab4_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000206c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002218  08002218  00012218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002264  08002264  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002264  08002264  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002264  08002264  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002264  08002264  00012264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002268  08002268  00012268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800226c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08002278  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002278  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a513  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000174a  00000000  00000000  0002a54f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  0002bca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  0002c7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d52  00000000  00000000  0002d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b66d  00000000  00000000  00054f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9191  00000000  00000000  000605b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00159748  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002da0  00000000  00000000  00159798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002200 	.word	0x08002200

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002200 	.word	0x08002200

080001ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f0:	f000 fb8f 	bl	8000912 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f4:	f000 f803 	bl	80001fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80001f8:	f000 f854 	bl	80002a4 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fc:	e7fe      	b.n	80001fc <main+0x10>

080001fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fe:	b580      	push	{r7, lr}
 8000200:	b096      	sub	sp, #88	; 0x58
 8000202:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	2244      	movs	r2, #68	; 0x44
 800020a:	2100      	movs	r1, #0
 800020c:	4618      	mov	r0, r3
 800020e:	f001 ffef 	bl	80021f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000212:	463b      	mov	r3, r7
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]
 8000218:	605a      	str	r2, [r3, #4]
 800021a:	609a      	str	r2, [r3, #8]
 800021c:	60da      	str	r2, [r3, #12]
 800021e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000220:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000224:	f000 fd22 	bl	8000c6c <HAL_PWREx_ControlVoltageScaling>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800022e:	f000 fab3 	bl	8000798 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000232:	2310      	movs	r3, #16
 8000234:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800023e:	2360      	movs	r3, #96	; 0x60
 8000240:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2302      	movs	r3, #2
 8000244:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000246:	2301      	movs	r3, #1
 8000248:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800024a:	2301      	movs	r3, #1
 800024c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800024e:	2310      	movs	r3, #16
 8000250:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000252:	2302      	movs	r3, #2
 8000254:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000256:	2302      	movs	r3, #2
 8000258:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800025a:	2302      	movs	r3, #2
 800025c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0314 	add.w	r3, r7, #20
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fd58 	bl	8000d18 <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800026e:	f000 fa93 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000276:	2303      	movs	r3, #3
 8000278:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000286:	463b      	mov	r3, r7
 8000288:	2101      	movs	r1, #1
 800028a:	4618      	mov	r0, r3
 800028c:	f001 f95e 	bl	800154c <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000296:	f000 fa7f 	bl	8000798 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3758      	adds	r7, #88	; 0x58
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b088      	sub	sp, #32
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002aa:	f107 0310 	add.w	r3, r7, #16
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002c2:	4b1e      	ldr	r3, [pc, #120]	; (800033c <MX_TIM2_Init+0x98>)
 80002c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 80002ca:	4b1c      	ldr	r3, [pc, #112]	; (800033c <MX_TIM2_Init+0x98>)
 80002cc:	f240 623f 	movw	r2, #1599	; 0x63f
 80002d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d2:	4b1a      	ldr	r3, [pc, #104]	; (800033c <MX_TIM2_Init+0x98>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80002d8:	4b18      	ldr	r3, [pc, #96]	; (800033c <MX_TIM2_Init+0x98>)
 80002da:	2201      	movs	r2, #1
 80002dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002de:	4b17      	ldr	r3, [pc, #92]	; (800033c <MX_TIM2_Init+0x98>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002e4:	4b15      	ldr	r3, [pc, #84]	; (800033c <MX_TIM2_Init+0x98>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002ea:	4814      	ldr	r0, [pc, #80]	; (800033c <MX_TIM2_Init+0x98>)
 80002ec:	f001 fb1a 	bl	8001924 <HAL_TIM_Base_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80002f6:	f000 fa4f 	bl	8000798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000300:	f107 0310 	add.w	r3, r7, #16
 8000304:	4619      	mov	r1, r3
 8000306:	480d      	ldr	r0, [pc, #52]	; (800033c <MX_TIM2_Init+0x98>)
 8000308:	f001 fc82 	bl	8001c10 <HAL_TIM_ConfigClockSource>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000312:	f000 fa41 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000316:	2300      	movs	r3, #0
 8000318:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800031a:	2300      	movs	r3, #0
 800031c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4619      	mov	r1, r3
 8000322:	4806      	ldr	r0, [pc, #24]	; (800033c <MX_TIM2_Init+0x98>)
 8000324:	f001 fe9a 	bl	800205c <HAL_TIMEx_MasterConfigSynchronization>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800032e:	f000 fa33 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000332:	bf00      	nop
 8000334:	3720      	adds	r7, #32
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000028 	.word	0x20000028

08000340 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	  static uint8_t previousCycleJoyPush_u8 = 0U;
	  static uint8_t currentDigit_u8 = 0U;

	  miliseconds_u16++;
 8000348:	4b8c      	ldr	r3, [pc, #560]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	3301      	adds	r3, #1
 800034e:	b29a      	uxth	r2, r3
 8000350:	4b8a      	ldr	r3, [pc, #552]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000352:	801a      	strh	r2, [r3, #0]

	  if (miliseconds_u16 >= MAX_MILISECONDS)
 8000354:	4b89      	ldr	r3, [pc, #548]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800035c:	d30c      	bcc.n	8000378 <HAL_TIM_PeriodElapsedCallback+0x38>
	  {
		  miliseconds_u16 -= MAX_MILISECONDS;
 800035e:	4b87      	ldr	r3, [pc, #540]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8000360:	881b      	ldrh	r3, [r3, #0]
 8000362:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000366:	b29a      	uxth	r2, r3
 8000368:	4b84      	ldr	r3, [pc, #528]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800036a:	801a      	strh	r2, [r3, #0]
		  seconds_u8++;
 800036c:	4b84      	ldr	r3, [pc, #528]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	3301      	adds	r3, #1
 8000372:	b2da      	uxtb	r2, r3
 8000374:	4b82      	ldr	r3, [pc, #520]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000376:	701a      	strb	r2, [r3, #0]
	  }

	  if (seconds_u8 >= MAX_MINUTES_SECONDS)
 8000378:	4b81      	ldr	r3, [pc, #516]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b3b      	cmp	r3, #59	; 0x3b
 800037e:	d908      	bls.n	8000392 <HAL_TIM_PeriodElapsedCallback+0x52>
	  {
		  seconds_u8 = 0U;
 8000380:	4b7f      	ldr	r3, [pc, #508]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]
		  minutes_u8++;
 8000386:	4b7f      	ldr	r3, [pc, #508]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	3301      	adds	r3, #1
 800038c:	b2da      	uxtb	r2, r3
 800038e:	4b7d      	ldr	r3, [pc, #500]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000390:	701a      	strb	r2, [r3, #0]
	  }

	  if (minutes_u8 >= MAX_MINUTES_SECONDS)
 8000392:	4b7c      	ldr	r3, [pc, #496]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b3b      	cmp	r3, #59	; 0x3b
 8000398:	d908      	bls.n	80003ac <HAL_TIM_PeriodElapsedCallback+0x6c>
	  {
		  minutes_u8 = 0U;
 800039a:	4b7a      	ldr	r3, [pc, #488]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800039c:	2200      	movs	r2, #0
 800039e:	701a      	strb	r2, [r3, #0]
		  hours_u8++;
 80003a0:	4b79      	ldr	r3, [pc, #484]	; (8000588 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	3301      	adds	r3, #1
 80003a6:	b2da      	uxtb	r2, r3
 80003a8:	4b77      	ldr	r3, [pc, #476]	; (8000588 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80003aa:	701a      	strb	r2, [r3, #0]
	  }

	  if (hours_u8 >= MAX_HOURS)
 80003ac:	4b76      	ldr	r3, [pc, #472]	; (8000588 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2b17      	cmp	r3, #23
 80003b2:	d90b      	bls.n	80003cc <HAL_TIM_PeriodElapsedCallback+0x8c>
	  {
		  miliseconds_u16 = 0U;
 80003b4:	4b71      	ldr	r3, [pc, #452]	; (800057c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	801a      	strh	r2, [r3, #0]
		  seconds_u8 = 0U;
 80003ba:	4b71      	ldr	r3, [pc, #452]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]
		  minutes_u8 = 0U;
 80003c0:	4b70      	ldr	r3, [pc, #448]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	701a      	strb	r2, [r3, #0]
		  hours_u8 = 0U;
 80003c6:	4b70      	ldr	r3, [pc, #448]	; (8000588 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]
	  }

	  if (JOY_PUSH_STATE)
 80003cc:	4b6f      	ldr	r3, [pc, #444]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80003ce:	691b      	ldr	r3, [r3, #16]
 80003d0:	43db      	mvns	r3, r3
 80003d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d015      	beq.n	8000406 <HAL_TIM_PeriodElapsedCallback+0xc6>
	  {
		  if (0U == previousCycleJoyPush_u8)
 80003da:	4b6d      	ldr	r3, [pc, #436]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d114      	bne.n	800040c <HAL_TIM_PeriodElapsedCallback+0xcc>
		  {
			  if (MINUTES_SECONDS == clockMode_e)
 80003e2:	4b6c      	ldr	r3, [pc, #432]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d103      	bne.n	80003f2 <HAL_TIM_PeriodElapsedCallback+0xb2>
			  {
				  clockMode_e = HOURS_MINUTES;
 80003ea:	4b6a      	ldr	r3, [pc, #424]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	701a      	strb	r2, [r3, #0]
 80003f0:	e005      	b.n	80003fe <HAL_TIM_PeriodElapsedCallback+0xbe>
			  }
			  else
			  {
				  clockMode_e = MINUTES_SECONDS;
 80003f2:	4b68      	ldr	r3, [pc, #416]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	701a      	strb	r2, [r3, #0]

				  /* On switching to minutes:seconds, right dot should be switched off
				   * and the counter should be reset. */
				  dotBlinkCounter_u16 = 0U;
 80003f8:	4b67      	ldr	r3, [pc, #412]	; (8000598 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	801a      	strh	r2, [r3, #0]
			  }

			  previousCycleJoyPush_u8 = 1U;
 80003fe:	4b64      	ldr	r3, [pc, #400]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000400:	2201      	movs	r2, #1
 8000402:	701a      	strb	r2, [r3, #0]
 8000404:	e002      	b.n	800040c <HAL_TIM_PeriodElapsedCallback+0xcc>
		  }
	  }
	  else
	  {
		  previousCycleJoyPush_u8 = 0U;
 8000406:	4b62      	ldr	r3, [pc, #392]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	  }

	  /* minutes:seconds */
	  if (MINUTES_SECONDS == clockMode_e)
 800040c:	4b61      	ldr	r3, [pc, #388]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	f040 80cd 	bne.w	80005b0 <HAL_TIM_PeriodElapsedCallback+0x270>
	  {
		  // Digit 1
		  if (0U == currentDigit_u8)
 8000416:	4b61      	ldr	r3, [pc, #388]	; (800059c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d128      	bne.n	8000470 <HAL_TIM_PeriodElapsedCallback+0x130>
		  {
			  uint8_t minutesDigitLeft_u8 = (uint8_t)((float)minutes_u8 / 10.0F);
 800041e:	4b59      	ldr	r3, [pc, #356]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	ee07 3a90 	vmov	s15, r3
 8000426:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800042a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800042e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000436:	edc7 7a00 	vstr	s15, [r7]
 800043a:	783b      	ldrb	r3, [r7, #0]
 800043c:	72fb      	strb	r3, [r7, #11]

			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT, SEGMENT_MASK, GPIO_PIN_RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	f240 217f 	movw	r1, #639	; 0x27f
 8000444:	4856      	ldr	r0, [pc, #344]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000446:	f000 fbea 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIGIT_GPIO_PORT, DIGIT_4_PIN, GPIO_PIN_RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2120      	movs	r1, #32
 800044e:	4855      	ldr	r0, [pc, #340]	; (80005a4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000450:	f000 fbe5 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT, segments_au8[minutesDigitLeft_u8], GPIO_PIN_SET);
 8000454:	7afb      	ldrb	r3, [r7, #11]
 8000456:	4a54      	ldr	r2, [pc, #336]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000458:	5cd3      	ldrb	r3, [r2, r3]
 800045a:	b29b      	uxth	r3, r3
 800045c:	2201      	movs	r2, #1
 800045e:	4619      	mov	r1, r3
 8000460:	484f      	ldr	r0, [pc, #316]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000462:	f000 fbdc 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIGIT_GPIO_PORT, DIGIT_1_PIN, GPIO_PIN_SET);
 8000466:	2201      	movs	r2, #1
 8000468:	2104      	movs	r1, #4
 800046a:	484e      	ldr	r0, [pc, #312]	; (80005a4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800046c:	f000 fbd7 	bl	8000c1e <HAL_GPIO_WritePin>
		  }

		  // Digit 2
		  if (1U == currentDigit_u8)
 8000470:	4b4a      	ldr	r3, [pc, #296]	; (800059c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d128      	bne.n	80004ca <HAL_TIM_PeriodElapsedCallback+0x18a>
		  {
			  uint8_t minutesDigitRight_u8 = minutes_u8 % 10U;
 8000478:	4b42      	ldr	r3, [pc, #264]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800047a:	781a      	ldrb	r2, [r3, #0]
 800047c:	4b4b      	ldr	r3, [pc, #300]	; (80005ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800047e:	fba3 1302 	umull	r1, r3, r3, r2
 8000482:	08d9      	lsrs	r1, r3, #3
 8000484:	460b      	mov	r3, r1
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	440b      	add	r3, r1
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	1ad3      	subs	r3, r2, r3
 800048e:	72bb      	strb	r3, [r7, #10]

			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT, SEGMENT_MASK, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	f240 217f 	movw	r1, #639	; 0x27f
 8000496:	4842      	ldr	r0, [pc, #264]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000498:	f000 fbc1 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIGIT_GPIO_PORT, DIGIT_1_PIN, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	2104      	movs	r1, #4
 80004a0:	4840      	ldr	r0, [pc, #256]	; (80005a4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80004a2:	f000 fbbc 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT, segments_au8[minutesDigitRight_u8] | SEGMENT_DP_PIN, GPIO_PIN_SET);
 80004a6:	7abb      	ldrb	r3, [r7, #10]
 80004a8:	4a3f      	ldr	r2, [pc, #252]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80004aa:	5cd3      	ldrb	r3, [r2, r3]
 80004ac:	b21b      	sxth	r3, r3
 80004ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004b2:	b21b      	sxth	r3, r3
 80004b4:	b29b      	uxth	r3, r3
 80004b6:	2201      	movs	r2, #1
 80004b8:	4619      	mov	r1, r3
 80004ba:	4839      	ldr	r0, [pc, #228]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80004bc:	f000 fbaf 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIGIT_GPIO_PORT, DIGIT_2_PIN, GPIO_PIN_SET);
 80004c0:	2201      	movs	r2, #1
 80004c2:	2108      	movs	r1, #8
 80004c4:	4837      	ldr	r0, [pc, #220]	; (80005a4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80004c6:	f000 fbaa 	bl	8000c1e <HAL_GPIO_WritePin>
		  }

		  // Digit 3
		  if (2U == currentDigit_u8)
 80004ca:	4b34      	ldr	r3, [pc, #208]	; (800059c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d128      	bne.n	8000524 <HAL_TIM_PeriodElapsedCallback+0x1e4>
		  {
			  uint8_t secondsDigitLeft_u8 = (uint8_t)((float)seconds_u8 / 10.0F);
 80004d2:	4b2b      	ldr	r3, [pc, #172]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	ee07 3a90 	vmov	s15, r3
 80004da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80004de:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80004e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80004e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80004ea:	edc7 7a00 	vstr	s15, [r7]
 80004ee:	783b      	ldrb	r3, [r7, #0]
 80004f0:	727b      	strb	r3, [r7, #9]

			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT, SEGMENT_MASK, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	f240 217f 	movw	r1, #639	; 0x27f
 80004f8:	4829      	ldr	r0, [pc, #164]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80004fa:	f000 fb90 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIGIT_GPIO_PORT, DIGIT_2_PIN, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2108      	movs	r1, #8
 8000502:	4828      	ldr	r0, [pc, #160]	; (80005a4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000504:	f000 fb8b 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT, segments_au8[secondsDigitLeft_u8], GPIO_PIN_SET);
 8000508:	7a7b      	ldrb	r3, [r7, #9]
 800050a:	4a27      	ldr	r2, [pc, #156]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800050c:	5cd3      	ldrb	r3, [r2, r3]
 800050e:	b29b      	uxth	r3, r3
 8000510:	2201      	movs	r2, #1
 8000512:	4619      	mov	r1, r3
 8000514:	4822      	ldr	r0, [pc, #136]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8000516:	f000 fb82 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIGIT_GPIO_PORT, DIGIT_3_PIN, GPIO_PIN_SET);
 800051a:	2201      	movs	r2, #1
 800051c:	2110      	movs	r1, #16
 800051e:	4821      	ldr	r0, [pc, #132]	; (80005a4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000520:	f000 fb7d 	bl	8000c1e <HAL_GPIO_WritePin>
		  }

		  // Digit 4
		  if (3U == currentDigit_u8)
 8000524:	4b1d      	ldr	r3, [pc, #116]	; (800059c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b03      	cmp	r3, #3
 800052a:	f040 8104 	bne.w	8000736 <HAL_TIM_PeriodElapsedCallback+0x3f6>
		  {
			  uint8_t secondsDigitRight_u8 = seconds_u8 % 10U;
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8000530:	781a      	ldrb	r2, [r3, #0]
 8000532:	4b1e      	ldr	r3, [pc, #120]	; (80005ac <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8000534:	fba3 1302 	umull	r1, r3, r3, r2
 8000538:	08d9      	lsrs	r1, r3, #3
 800053a:	460b      	mov	r3, r1
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	440b      	add	r3, r1
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	723b      	strb	r3, [r7, #8]

			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT, SEGMENT_MASK, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f240 217f 	movw	r1, #639	; 0x27f
 800054c:	4814      	ldr	r0, [pc, #80]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800054e:	f000 fb66 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIGIT_GPIO_PORT, DIGIT_3_PIN, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2110      	movs	r1, #16
 8000556:	4813      	ldr	r0, [pc, #76]	; (80005a4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000558:	f000 fb61 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT, segments_au8[secondsDigitRight_u8], GPIO_PIN_SET);
 800055c:	7a3b      	ldrb	r3, [r7, #8]
 800055e:	4a12      	ldr	r2, [pc, #72]	; (80005a8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8000560:	5cd3      	ldrb	r3, [r2, r3]
 8000562:	b29b      	uxth	r3, r3
 8000564:	2201      	movs	r2, #1
 8000566:	4619      	mov	r1, r3
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800056a:	f000 fb58 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIGIT_GPIO_PORT, DIGIT_4_PIN, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2120      	movs	r1, #32
 8000572:	480c      	ldr	r0, [pc, #48]	; (80005a4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8000574:	f000 fb53 	bl	8000c1e <HAL_GPIO_WritePin>
 8000578:	e0dd      	b.n	8000736 <HAL_TIM_PeriodElapsedCallback+0x3f6>
 800057a:	bf00      	nop
 800057c:	20000074 	.word	0x20000074
 8000580:	20000078 	.word	0x20000078
 8000584:	20000079 	.word	0x20000079
 8000588:	2000007a 	.word	0x2000007a
 800058c:	48001000 	.word	0x48001000
 8000590:	2000007c 	.word	0x2000007c
 8000594:	2000007b 	.word	0x2000007b
 8000598:	20000076 	.word	0x20000076
 800059c:	2000007d 	.word	0x2000007d
 80005a0:	48001800 	.word	0x48001800
 80005a4:	48000400 	.word	0x48000400
 80005a8:	08002218 	.word	0x08002218
 80005ac:	cccccccd 	.word	0xcccccccd
		  }

	  }
	  /* hours:minutes */
	  else if (HOURS_MINUTES == clockMode_e)
 80005b0:	4b70      	ldr	r3, [pc, #448]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x434>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	f040 80be 	bne.w	8000736 <HAL_TIM_PeriodElapsedCallback+0x3f6>
	  {
		  // Digit 1
		  if (0U == currentDigit_u8)
 80005ba:	4b6f      	ldr	r3, [pc, #444]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x438>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d128      	bne.n	8000614 <HAL_TIM_PeriodElapsedCallback+0x2d4>
		  {
			  uint8_t hoursDigitLeft_u8 = (uint8_t)((float)hours_u8 / 10.0F);
 80005c2:	4b6e      	ldr	r3, [pc, #440]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x43c>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	ee07 3a90 	vmov	s15, r3
 80005ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005ce:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80005d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005da:	edc7 7a00 	vstr	s15, [r7]
 80005de:	783b      	ldrb	r3, [r7, #0]
 80005e0:	73fb      	strb	r3, [r7, #15]

			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT, SEGMENT_MASK, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f240 217f 	movw	r1, #639	; 0x27f
 80005e8:	4865      	ldr	r0, [pc, #404]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x440>)
 80005ea:	f000 fb18 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIGIT_GPIO_PORT, DIGIT_4_PIN, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2120      	movs	r1, #32
 80005f2:	4864      	ldr	r0, [pc, #400]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x444>)
 80005f4:	f000 fb13 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT, segments_au8[hoursDigitLeft_u8], GPIO_PIN_SET);
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	4a63      	ldr	r2, [pc, #396]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x448>)
 80005fc:	5cd3      	ldrb	r3, [r2, r3]
 80005fe:	b29b      	uxth	r3, r3
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	485e      	ldr	r0, [pc, #376]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8000606:	f000 fb0a 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIGIT_GPIO_PORT, DIGIT_1_PIN, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2104      	movs	r1, #4
 800060e:	485d      	ldr	r0, [pc, #372]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8000610:	f000 fb05 	bl	8000c1e <HAL_GPIO_WritePin>
		  }

		  // Digit 2
		  if (1U == currentDigit_u8)
 8000614:	4b58      	ldr	r3, [pc, #352]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d128      	bne.n	800066e <HAL_TIM_PeriodElapsedCallback+0x32e>
		  {
			  uint8_t hoursDigitRight_u8 = hours_u8 % 10U;
 800061c:	4b57      	ldr	r3, [pc, #348]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x43c>)
 800061e:	781a      	ldrb	r2, [r3, #0]
 8000620:	4b5a      	ldr	r3, [pc, #360]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8000622:	fba3 1302 	umull	r1, r3, r3, r2
 8000626:	08d9      	lsrs	r1, r3, #3
 8000628:	460b      	mov	r3, r1
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	440b      	add	r3, r1
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	73bb      	strb	r3, [r7, #14]

			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT, SEGMENT_MASK, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f240 217f 	movw	r1, #639	; 0x27f
 800063a:	4851      	ldr	r0, [pc, #324]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x440>)
 800063c:	f000 faef 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIGIT_GPIO_PORT, DIGIT_1_PIN, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2104      	movs	r1, #4
 8000644:	484f      	ldr	r0, [pc, #316]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8000646:	f000 faea 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT, segments_au8[hoursDigitRight_u8] | SEGMENT_DP_PIN, GPIO_PIN_SET);
 800064a:	7bbb      	ldrb	r3, [r7, #14]
 800064c:	4a4e      	ldr	r2, [pc, #312]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x448>)
 800064e:	5cd3      	ldrb	r3, [r2, r3]
 8000650:	b21b      	sxth	r3, r3
 8000652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000656:	b21b      	sxth	r3, r3
 8000658:	b29b      	uxth	r3, r3
 800065a:	2201      	movs	r2, #1
 800065c:	4619      	mov	r1, r3
 800065e:	4848      	ldr	r0, [pc, #288]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8000660:	f000 fadd 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIGIT_GPIO_PORT, DIGIT_2_PIN, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2108      	movs	r1, #8
 8000668:	4846      	ldr	r0, [pc, #280]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x444>)
 800066a:	f000 fad8 	bl	8000c1e <HAL_GPIO_WritePin>
		  }

		  // Digit 3
		  if (2U == currentDigit_u8)
 800066e:	4b42      	ldr	r3, [pc, #264]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b02      	cmp	r3, #2
 8000674:	d128      	bne.n	80006c8 <HAL_TIM_PeriodElapsedCallback+0x388>
		  {
			  uint8_t minutesDigitLeft_u8 = (uint8_t)((float)minutes_u8 / 10.0F);
 8000676:	4b46      	ldr	r3, [pc, #280]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x450>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	ee07 3a90 	vmov	s15, r3
 800067e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000682:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800068a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800068e:	edc7 7a00 	vstr	s15, [r7]
 8000692:	783b      	ldrb	r3, [r7, #0]
 8000694:	737b      	strb	r3, [r7, #13]

			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT, SEGMENT_MASK, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f240 217f 	movw	r1, #639	; 0x27f
 800069c:	4838      	ldr	r0, [pc, #224]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x440>)
 800069e:	f000 fabe 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIGIT_GPIO_PORT, DIGIT_2_PIN, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2108      	movs	r1, #8
 80006a6:	4837      	ldr	r0, [pc, #220]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x444>)
 80006a8:	f000 fab9 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT, segments_au8[minutesDigitLeft_u8], GPIO_PIN_SET);
 80006ac:	7b7b      	ldrb	r3, [r7, #13]
 80006ae:	4a36      	ldr	r2, [pc, #216]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x448>)
 80006b0:	5cd3      	ldrb	r3, [r2, r3]
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	2201      	movs	r2, #1
 80006b6:	4619      	mov	r1, r3
 80006b8:	4831      	ldr	r0, [pc, #196]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x440>)
 80006ba:	f000 fab0 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIGIT_GPIO_PORT, DIGIT_3_PIN, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2110      	movs	r1, #16
 80006c2:	4830      	ldr	r0, [pc, #192]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x444>)
 80006c4:	f000 faab 	bl	8000c1e <HAL_GPIO_WritePin>
		  }

		  // Digit 4
		  if (3U == currentDigit_u8)
 80006c8:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x438>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	d132      	bne.n	8000736 <HAL_TIM_PeriodElapsedCallback+0x3f6>
		  {
			  uint8_t minutesDigitRight_u8 = minutes_u8 % 10U;
 80006d0:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x450>)
 80006d2:	781a      	ldrb	r2, [r3, #0]
 80006d4:	4b2d      	ldr	r3, [pc, #180]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x44c>)
 80006d6:	fba3 1302 	umull	r1, r3, r3, r2
 80006da:	08d9      	lsrs	r1, r3, #3
 80006dc:	460b      	mov	r3, r1
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	440b      	add	r3, r1
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	733b      	strb	r3, [r7, #12]

			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT, SEGMENT_MASK, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f240 217f 	movw	r1, #639	; 0x27f
 80006ee:	4824      	ldr	r0, [pc, #144]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x440>)
 80006f0:	f000 fa95 	bl	8000c1e <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(DIGIT_GPIO_PORT, DIGIT_3_PIN, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2110      	movs	r1, #16
 80006f8:	4822      	ldr	r0, [pc, #136]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x444>)
 80006fa:	f000 fa90 	bl	8000c1e <HAL_GPIO_WritePin>

			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT,
					                              (dotBlinkCounter_u16 < (RIGHT_DOT_BLINK_INTERVAL / 2U)) ?
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x454>)
 8000700:	881b      	ldrh	r3, [r3, #0]
			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT,
 8000702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000706:	d204      	bcs.n	8000712 <HAL_TIM_PeriodElapsedCallback+0x3d2>
					                                    segments_au8[minutesDigitRight_u8] : segments_au8[minutesDigitRight_u8] | SEGMENT_DP_PIN,
 8000708:	7b3b      	ldrb	r3, [r7, #12]
 800070a:	4a1f      	ldr	r2, [pc, #124]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x448>)
 800070c:	5cd3      	ldrb	r3, [r2, r3]
			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT,
 800070e:	b29b      	uxth	r3, r3
 8000710:	e007      	b.n	8000722 <HAL_TIM_PeriodElapsedCallback+0x3e2>
					                                    segments_au8[minutesDigitRight_u8] : segments_au8[minutesDigitRight_u8] | SEGMENT_DP_PIN,
 8000712:	7b3b      	ldrb	r3, [r7, #12]
 8000714:	4a1c      	ldr	r2, [pc, #112]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8000716:	5cd3      	ldrb	r3, [r2, r3]
 8000718:	b21b      	sxth	r3, r3
 800071a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800071e:	b21b      	sxth	r3, r3
			  HAL_GPIO_WritePin(SEGMENT_GPIO_PORT,
 8000720:	b29b      	uxth	r3, r3
 8000722:	2201      	movs	r2, #1
 8000724:	4619      	mov	r1, r3
 8000726:	4816      	ldr	r0, [pc, #88]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8000728:	f000 fa79 	bl	8000c1e <HAL_GPIO_WritePin>
							                       GPIO_PIN_SET);

			  HAL_GPIO_WritePin(DIGIT_GPIO_PORT, DIGIT_4_PIN, GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	2120      	movs	r1, #32
 8000730:	4814      	ldr	r0, [pc, #80]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8000732:	f000 fa74 	bl	8000c1e <HAL_GPIO_WritePin>

		  }
	  }

	  dotBlinkCounter_u16++;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x454>)
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	b29a      	uxth	r2, r3
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x454>)
 8000740:	801a      	strh	r2, [r3, #0]
	  if (dotBlinkCounter_u16 >= RIGHT_DOT_BLINK_INTERVAL)
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x454>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800074a:	d302      	bcc.n	8000752 <HAL_TIM_PeriodElapsedCallback+0x412>
	  {
		  dotBlinkCounter_u16 = 0U;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x454>)
 800074e:	2200      	movs	r2, #0
 8000750:	801a      	strh	r2, [r3, #0]
	  }

	  currentDigit_u8++;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x438>)
 800075c:	701a      	strb	r2, [r3, #0]
	  if (currentDigit_u8 >= NUMBER_OF_DIGITS)
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b03      	cmp	r3, #3
 8000764:	d902      	bls.n	800076c <HAL_TIM_PeriodElapsedCallback+0x42c>
	  {
		  currentDigit_u8 = 0U;
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
	  }
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2000007b 	.word	0x2000007b
 8000778:	2000007d 	.word	0x2000007d
 800077c:	2000007a 	.word	0x2000007a
 8000780:	48001800 	.word	0x48001800
 8000784:	48000400 	.word	0x48000400
 8000788:	08002218 	.word	0x08002218
 800078c:	cccccccd 	.word	0xcccccccd
 8000790:	20000079 	.word	0x20000079
 8000794:	20000076 	.word	0x20000076

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_MspInit+0x44>)
 80007ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ae:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HAL_MspInit+0x44>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6613      	str	r3, [r2, #96]	; 0x60
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_MspInit+0x44>)
 80007b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_MspInit+0x44>)
 80007c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_MspInit+0x44>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	6593      	str	r3, [r2, #88]	; 0x58
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_MspInit+0x44>)
 80007d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000

080007ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007fc:	d113      	bne.n	8000826 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_TIM_Base_MspInit+0x44>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000802:	4a0b      	ldr	r2, [pc, #44]	; (8000830 <HAL_TIM_Base_MspInit+0x44>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6593      	str	r3, [r2, #88]	; 0x58
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_TIM_Base_MspInit+0x44>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	201c      	movs	r0, #28
 800081c:	f000 f9c9 	bl	8000bb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000820:	201c      	movs	r0, #28
 8000822:	f000 f9e2 	bl	8000bea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <NMI_Handler+0x4>

0800083a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <HardFault_Handler+0x4>

08000840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <MemManage_Handler+0x4>

08000846 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <BusFault_Handler+0x4>

0800084c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <UsageFault_Handler+0x4>

08000852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000880:	f000 f89c 	bl	80009bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <TIM2_IRQHandler+0x10>)
 800088e:	f001 f8a0 	bl	80019d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000028 	.word	0x20000028

0800089c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008c4:	f7ff ffea 	bl	800089c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <LoopForever+0x6>)
  ldr r1, =_edata
 80008ca:	490d      	ldr	r1, [pc, #52]	; (8000900 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008cc:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <LoopForever+0xe>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e0:	4c0a      	ldr	r4, [pc, #40]	; (800090c <LoopForever+0x16>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ee:	f001 fc5b 	bl	80021a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008f2:	f7ff fc7b 	bl	80001ec <main>

080008f6 <LoopForever>:

LoopForever:
    b LoopForever
 80008f6:	e7fe      	b.n	80008f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008f8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000904:	0800226c 	.word	0x0800226c
  ldr r2, =_sbss
 8000908:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800090c:	20000084 	.word	0x20000084

08000910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC1_2_IRQHandler>

08000912 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000918:	2300      	movs	r3, #0
 800091a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091c:	2003      	movs	r0, #3
 800091e:	f000 f93d 	bl	8000b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000922:	200f      	movs	r0, #15
 8000924:	f000 f80e 	bl	8000944 <HAL_InitTick>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d002      	beq.n	8000934 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	71fb      	strb	r3, [r7, #7]
 8000932:	e001      	b.n	8000938 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000934:	f7ff ff36 	bl	80007a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000938:	79fb      	ldrb	r3, [r7, #7]
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <HAL_InitTick+0x6c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d023      	beq.n	80009a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <HAL_InitTick+0x70>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <HAL_InitTick+0x6c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f949 	bl	8000c06 <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d10f      	bne.n	800099a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d809      	bhi.n	8000994 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	f04f 30ff 	mov.w	r0, #4294967295
 8000988:	f000 f913 	bl	8000bb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800098c:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <HAL_InitTick+0x74>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
 8000992:	e007      	b.n	80009a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	73fb      	strb	r3, [r7, #15]
 8000998:	e004      	b.n	80009a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	73fb      	strb	r3, [r7, #15]
 800099e:	e001      	b.n	80009a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3710      	adds	r7, #16
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000004 	.word	0x20000004

080009bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x20>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_IncTick+0x24>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <HAL_IncTick+0x24>)
 80009ce:	6013      	str	r3, [r2, #0]
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000080 	.word	0x20000080

080009e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <HAL_GetTick+0x14>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000080 	.word	0x20000080

080009fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2e:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	60d3      	str	r3, [r2, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <__NVIC_GetPriorityGrouping+0x18>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	f003 0307 	and.w	r3, r3, #7
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	db0b      	blt.n	8000a8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	f003 021f 	and.w	r2, r3, #31
 8000a78:	4907      	ldr	r1, [pc, #28]	; (8000a98 <__NVIC_EnableIRQ+0x38>)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	095b      	lsrs	r3, r3, #5
 8000a80:	2001      	movs	r0, #1
 8000a82:	fa00 f202 	lsl.w	r2, r0, r2
 8000a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000e100 	.word	0xe000e100

08000a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	6039      	str	r1, [r7, #0]
 8000aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db0a      	blt.n	8000ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	490c      	ldr	r1, [pc, #48]	; (8000ae8 <__NVIC_SetPriority+0x4c>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	0112      	lsls	r2, r2, #4
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	440b      	add	r3, r1
 8000ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac4:	e00a      	b.n	8000adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4908      	ldr	r1, [pc, #32]	; (8000aec <__NVIC_SetPriority+0x50>)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	3b04      	subs	r3, #4
 8000ad4:	0112      	lsls	r2, r2, #4
 8000ad6:	b2d2      	uxtb	r2, r2
 8000ad8:	440b      	add	r3, r1
 8000ada:	761a      	strb	r2, [r3, #24]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000e100 	.word	0xe000e100
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b089      	sub	sp, #36	; 0x24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f1c3 0307 	rsb	r3, r3, #7
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	bf28      	it	cs
 8000b0e:	2304      	movcs	r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3304      	adds	r3, #4
 8000b16:	2b06      	cmp	r3, #6
 8000b18:	d902      	bls.n	8000b20 <NVIC_EncodePriority+0x30>
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3b03      	subs	r3, #3
 8000b1e:	e000      	b.n	8000b22 <NVIC_EncodePriority+0x32>
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	401a      	ands	r2, r3
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b38:	f04f 31ff 	mov.w	r1, #4294967295
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b42:	43d9      	mvns	r1, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	4313      	orrs	r3, r2
         );
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3724      	adds	r7, #36	; 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b68:	d301      	bcc.n	8000b6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <SysTick_Config+0x40>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b76:	210f      	movs	r1, #15
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f7ff ff8e 	bl	8000a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <SysTick_Config+0x40>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <SysTick_Config+0x40>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	e000e010 	.word	0xe000e010

08000b9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f7ff ff29 	bl	80009fc <__NVIC_SetPriorityGrouping>
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bc4:	f7ff ff3e 	bl	8000a44 <__NVIC_GetPriorityGrouping>
 8000bc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	6978      	ldr	r0, [r7, #20]
 8000bd0:	f7ff ff8e 	bl	8000af0 <NVIC_EncodePriority>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff5d 	bl	8000a9c <__NVIC_SetPriority>
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff31 	bl	8000a60 <__NVIC_EnableIRQ>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ffa2 	bl	8000b58 <SysTick_Config>
 8000c14:	4603      	mov	r3, r0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	460b      	mov	r3, r1
 8000c28:	807b      	strh	r3, [r7, #2]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c2e:	787b      	ldrb	r3, [r7, #1]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c34:	887a      	ldrh	r2, [r7, #2]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c3a:	e002      	b.n	8000c42 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c3c:	887a      	ldrh	r2, [r7, #2]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40007000 	.word	0x40007000

08000c6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c7a:	d130      	bne.n	8000cde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c7c:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c88:	d038      	beq.n	8000cfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c8a:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c92:	4a1e      	ldr	r2, [pc, #120]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2232      	movs	r2, #50	; 0x32
 8000ca0:	fb02 f303 	mul.w	r3, r2, r3
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8000caa:	0c9b      	lsrs	r3, r3, #18
 8000cac:	3301      	adds	r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cb0:	e002      	b.n	8000cb8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cc4:	d102      	bne.n	8000ccc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1f2      	bne.n	8000cb2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cd8:	d110      	bne.n	8000cfc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e00f      	b.n	8000cfe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cea:	d007      	beq.n	8000cfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cf4:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cfa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40007000 	.word	0x40007000
 8000d10:	20000000 	.word	0x20000000
 8000d14:	431bde83 	.word	0x431bde83

08000d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d102      	bne.n	8000d2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	f000 bc08 	b.w	800153c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d2c:	4b96      	ldr	r3, [pc, #600]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	f003 030c 	and.w	r3, r3, #12
 8000d34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d36:	4b94      	ldr	r3, [pc, #592]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f003 0310 	and.w	r3, r3, #16
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 80e4 	beq.w	8000f16 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d007      	beq.n	8000d64 <HAL_RCC_OscConfig+0x4c>
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	2b0c      	cmp	r3, #12
 8000d58:	f040 808b 	bne.w	8000e72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	f040 8087 	bne.w	8000e72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d64:	4b88      	ldr	r3, [pc, #544]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d005      	beq.n	8000d7c <HAL_RCC_OscConfig+0x64>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d101      	bne.n	8000d7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e3df      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a1a      	ldr	r2, [r3, #32]
 8000d80:	4b81      	ldr	r3, [pc, #516]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 0308 	and.w	r3, r3, #8
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d004      	beq.n	8000d96 <HAL_RCC_OscConfig+0x7e>
 8000d8c:	4b7e      	ldr	r3, [pc, #504]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d94:	e005      	b.n	8000da2 <HAL_RCC_OscConfig+0x8a>
 8000d96:	4b7c      	ldr	r3, [pc, #496]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d9c:	091b      	lsrs	r3, r3, #4
 8000d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d223      	bcs.n	8000dee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a1b      	ldr	r3, [r3, #32]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fd5a 	bl	8001864 <RCC_SetFlashLatencyFromMSIRange>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e3c0      	b.n	800153c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dba:	4b73      	ldr	r3, [pc, #460]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a72      	ldr	r2, [pc, #456]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	4b70      	ldr	r3, [pc, #448]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a1b      	ldr	r3, [r3, #32]
 8000dd2:	496d      	ldr	r1, [pc, #436]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000dd8:	4b6b      	ldr	r3, [pc, #428]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69db      	ldr	r3, [r3, #28]
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	4968      	ldr	r1, [pc, #416]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000de8:	4313      	orrs	r3, r2
 8000dea:	604b      	str	r3, [r1, #4]
 8000dec:	e025      	b.n	8000e3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dee:	4b66      	ldr	r3, [pc, #408]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a65      	ldr	r2, [pc, #404]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000df4:	f043 0308 	orr.w	r3, r3, #8
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b63      	ldr	r3, [pc, #396]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a1b      	ldr	r3, [r3, #32]
 8000e06:	4960      	ldr	r1, [pc, #384]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e0c:	4b5e      	ldr	r3, [pc, #376]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	495b      	ldr	r1, [pc, #364]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d109      	bne.n	8000e3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6a1b      	ldr	r3, [r3, #32]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 fd1a 	bl	8001864 <RCC_SetFlashLatencyFromMSIRange>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e380      	b.n	800153c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000e3a:	f000 fc87 	bl	800174c <HAL_RCC_GetSysClockFreq>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	4b51      	ldr	r3, [pc, #324]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	091b      	lsrs	r3, r3, #4
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	4950      	ldr	r1, [pc, #320]	; (8000f8c <HAL_RCC_OscConfig+0x274>)
 8000e4c:	5ccb      	ldrb	r3, [r1, r3]
 8000e4e:	f003 031f 	and.w	r3, r3, #31
 8000e52:	fa22 f303 	lsr.w	r3, r2, r3
 8000e56:	4a4e      	ldr	r2, [pc, #312]	; (8000f90 <HAL_RCC_OscConfig+0x278>)
 8000e58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000e5a:	4b4e      	ldr	r3, [pc, #312]	; (8000f94 <HAL_RCC_OscConfig+0x27c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fd70 	bl	8000944 <HAL_InitTick>
 8000e64:	4603      	mov	r3, r0
 8000e66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d052      	beq.n	8000f14 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	e364      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d032      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e7a:	4b43      	ldr	r3, [pc, #268]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a42      	ldr	r2, [pc, #264]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e86:	f7ff fdad 	bl	80009e4 <HAL_GetTick>
 8000e8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000e8c:	e008      	b.n	8000ea0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e8e:	f7ff fda9 	bl	80009e4 <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d901      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e34d      	b.n	800153c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ea0:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0f0      	beq.n	8000e8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000eac:	4b36      	ldr	r3, [pc, #216]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a35      	ldr	r2, [pc, #212]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000eb2:	f043 0308 	orr.w	r3, r3, #8
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	4b33      	ldr	r3, [pc, #204]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	4930      	ldr	r1, [pc, #192]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000eca:	4b2f      	ldr	r3, [pc, #188]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	492b      	ldr	r1, [pc, #172]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000eda:	4313      	orrs	r3, r2
 8000edc:	604b      	str	r3, [r1, #4]
 8000ede:	e01a      	b.n	8000f16 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000ee0:	4b29      	ldr	r3, [pc, #164]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a28      	ldr	r2, [pc, #160]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000ee6:	f023 0301 	bic.w	r3, r3, #1
 8000eea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fd7a 	bl	80009e4 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ef4:	f7ff fd76 	bl	80009e4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e31a      	b.n	800153c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f0      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x1dc>
 8000f12:	e000      	b.n	8000f16 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d073      	beq.n	800100a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d005      	beq.n	8000f34 <HAL_RCC_OscConfig+0x21c>
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	2b0c      	cmp	r3, #12
 8000f2c:	d10e      	bne.n	8000f4c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d10b      	bne.n	8000f4c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d063      	beq.n	8001008 <HAL_RCC_OscConfig+0x2f0>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d15f      	bne.n	8001008 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e2f7      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f54:	d106      	bne.n	8000f64 <HAL_RCC_OscConfig+0x24c>
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e025      	b.n	8000fb0 <HAL_RCC_OscConfig+0x298>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f6c:	d114      	bne.n	8000f98 <HAL_RCC_OscConfig+0x280>
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a02      	ldr	r2, [pc, #8]	; (8000f88 <HAL_RCC_OscConfig+0x270>)
 8000f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e013      	b.n	8000fb0 <HAL_RCC_OscConfig+0x298>
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	08002224 	.word	0x08002224
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000004 	.word	0x20000004
 8000f98:	4ba0      	ldr	r3, [pc, #640]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a9f      	ldr	r2, [pc, #636]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8000f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b9d      	ldr	r3, [pc, #628]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a9c      	ldr	r2, [pc, #624]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8000faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d013      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fd14 	bl	80009e4 <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fc0:	f7ff fd10 	bl	80009e4 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b64      	cmp	r3, #100	; 0x64
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e2b4      	b.n	800153c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000fd2:	4b92      	ldr	r3, [pc, #584]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f0      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x2a8>
 8000fde:	e014      	b.n	800100a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fd00 	bl	80009e4 <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fcfc 	bl	80009e4 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b64      	cmp	r3, #100	; 0x64
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e2a0      	b.n	800153c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ffa:	4b88      	ldr	r3, [pc, #544]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f0      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x2d0>
 8001006:	e000      	b.n	800100a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	2b00      	cmp	r3, #0
 8001014:	d060      	beq.n	80010d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	2b04      	cmp	r3, #4
 800101a:	d005      	beq.n	8001028 <HAL_RCC_OscConfig+0x310>
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	2b0c      	cmp	r3, #12
 8001020:	d119      	bne.n	8001056 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d116      	bne.n	8001056 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001028:	4b7c      	ldr	r3, [pc, #496]	; (800121c <HAL_RCC_OscConfig+0x504>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001030:	2b00      	cmp	r3, #0
 8001032:	d005      	beq.n	8001040 <HAL_RCC_OscConfig+0x328>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e27d      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001040:	4b76      	ldr	r3, [pc, #472]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	061b      	lsls	r3, r3, #24
 800104e:	4973      	ldr	r1, [pc, #460]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001050:	4313      	orrs	r3, r2
 8001052:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001054:	e040      	b.n	80010d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d023      	beq.n	80010a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800105e:	4b6f      	ldr	r3, [pc, #444]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a6e      	ldr	r2, [pc, #440]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800106a:	f7ff fcbb 	bl	80009e4 <HAL_GetTick>
 800106e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001072:	f7ff fcb7 	bl	80009e4 <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e25b      	b.n	800153c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001084:	4b65      	ldr	r3, [pc, #404]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0f0      	beq.n	8001072 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001090:	4b62      	ldr	r3, [pc, #392]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	061b      	lsls	r3, r3, #24
 800109e:	495f      	ldr	r1, [pc, #380]	; (800121c <HAL_RCC_OscConfig+0x504>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	604b      	str	r3, [r1, #4]
 80010a4:	e018      	b.n	80010d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a6:	4b5d      	ldr	r3, [pc, #372]	; (800121c <HAL_RCC_OscConfig+0x504>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a5c      	ldr	r2, [pc, #368]	; (800121c <HAL_RCC_OscConfig+0x504>)
 80010ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b2:	f7ff fc97 	bl	80009e4 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ba:	f7ff fc93 	bl	80009e4 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e237      	b.n	800153c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010cc:	4b53      	ldr	r3, [pc, #332]	; (800121c <HAL_RCC_OscConfig+0x504>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f0      	bne.n	80010ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d03c      	beq.n	800115e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d01c      	beq.n	8001126 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ec:	4b4b      	ldr	r3, [pc, #300]	; (800121c <HAL_RCC_OscConfig+0x504>)
 80010ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010f2:	4a4a      	ldr	r2, [pc, #296]	; (800121c <HAL_RCC_OscConfig+0x504>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010fc:	f7ff fc72 	bl	80009e4 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001104:	f7ff fc6e 	bl	80009e4 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e212      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001116:	4b41      	ldr	r3, [pc, #260]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0ef      	beq.n	8001104 <HAL_RCC_OscConfig+0x3ec>
 8001124:	e01b      	b.n	800115e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001126:	4b3d      	ldr	r3, [pc, #244]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800112c:	4a3b      	ldr	r2, [pc, #236]	; (800121c <HAL_RCC_OscConfig+0x504>)
 800112e:	f023 0301 	bic.w	r3, r3, #1
 8001132:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001136:	f7ff fc55 	bl	80009e4 <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800113e:	f7ff fc51 	bl	80009e4 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e1f5      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001150:	4b32      	ldr	r3, [pc, #200]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1ef      	bne.n	800113e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 80a6 	beq.w	80012b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001170:	4b2a      	ldr	r3, [pc, #168]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10d      	bne.n	8001198 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800117c:	4b27      	ldr	r3, [pc, #156]	; (800121c <HAL_RCC_OscConfig+0x504>)
 800117e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001180:	4a26      	ldr	r2, [pc, #152]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001186:	6593      	str	r3, [r2, #88]	; 0x58
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <HAL_RCC_OscConfig+0x504>)
 800118a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001194:	2301      	movs	r3, #1
 8001196:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001198:	4b21      	ldr	r3, [pc, #132]	; (8001220 <HAL_RCC_OscConfig+0x508>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d118      	bne.n	80011d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <HAL_RCC_OscConfig+0x508>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <HAL_RCC_OscConfig+0x508>)
 80011aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011b0:	f7ff fc18 	bl	80009e4 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011b8:	f7ff fc14 	bl	80009e4 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e1b8      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_RCC_OscConfig+0x508>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f0      	beq.n	80011b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d108      	bne.n	80011f0 <HAL_RCC_OscConfig+0x4d8>
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_RCC_OscConfig+0x504>)
 80011e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_RCC_OscConfig+0x504>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80011ee:	e029      	b.n	8001244 <HAL_RCC_OscConfig+0x52c>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	d115      	bne.n	8001224 <HAL_RCC_OscConfig+0x50c>
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_RCC_OscConfig+0x504>)
 80011fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <HAL_RCC_OscConfig+0x504>)
 800120a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800120e:	4a03      	ldr	r2, [pc, #12]	; (800121c <HAL_RCC_OscConfig+0x504>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001218:	e014      	b.n	8001244 <HAL_RCC_OscConfig+0x52c>
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	40007000 	.word	0x40007000
 8001224:	4b9d      	ldr	r3, [pc, #628]	; (800149c <HAL_RCC_OscConfig+0x784>)
 8001226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122a:	4a9c      	ldr	r2, [pc, #624]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800122c:	f023 0301 	bic.w	r3, r3, #1
 8001230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001234:	4b99      	ldr	r3, [pc, #612]	; (800149c <HAL_RCC_OscConfig+0x784>)
 8001236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800123a:	4a98      	ldr	r2, [pc, #608]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800123c:	f023 0304 	bic.w	r3, r3, #4
 8001240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d016      	beq.n	800127a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124c:	f7ff fbca 	bl	80009e4 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001252:	e00a      	b.n	800126a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001254:	f7ff fbc6 	bl	80009e4 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001262:	4293      	cmp	r3, r2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e168      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800126a:	4b8c      	ldr	r3, [pc, #560]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800126c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d0ed      	beq.n	8001254 <HAL_RCC_OscConfig+0x53c>
 8001278:	e015      	b.n	80012a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127a:	f7ff fbb3 	bl	80009e4 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001280:	e00a      	b.n	8001298 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001282:	f7ff fbaf 	bl	80009e4 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001290:	4293      	cmp	r3, r2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e151      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001298:	4b80      	ldr	r3, [pc, #512]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800129a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1ed      	bne.n	8001282 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012a6:	7ffb      	ldrb	r3, [r7, #31]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d105      	bne.n	80012b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ac:	4b7b      	ldr	r3, [pc, #492]	; (800149c <HAL_RCC_OscConfig+0x784>)
 80012ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b0:	4a7a      	ldr	r2, [pc, #488]	; (800149c <HAL_RCC_OscConfig+0x784>)
 80012b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d03c      	beq.n	800133e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d01c      	beq.n	8001306 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012cc:	4b73      	ldr	r3, [pc, #460]	; (800149c <HAL_RCC_OscConfig+0x784>)
 80012ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012d2:	4a72      	ldr	r2, [pc, #456]	; (800149c <HAL_RCC_OscConfig+0x784>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012dc:	f7ff fb82 	bl	80009e4 <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012e4:	f7ff fb7e 	bl	80009e4 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e122      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012f6:	4b69      	ldr	r3, [pc, #420]	; (800149c <HAL_RCC_OscConfig+0x784>)
 80012f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0ef      	beq.n	80012e4 <HAL_RCC_OscConfig+0x5cc>
 8001304:	e01b      	b.n	800133e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001306:	4b65      	ldr	r3, [pc, #404]	; (800149c <HAL_RCC_OscConfig+0x784>)
 8001308:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800130c:	4a63      	ldr	r2, [pc, #396]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800130e:	f023 0301 	bic.w	r3, r3, #1
 8001312:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001316:	f7ff fb65 	bl	80009e4 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800131e:	f7ff fb61 	bl	80009e4 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e105      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001330:	4b5a      	ldr	r3, [pc, #360]	; (800149c <HAL_RCC_OscConfig+0x784>)
 8001332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1ef      	bne.n	800131e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 80f9 	beq.w	800153a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134c:	2b02      	cmp	r3, #2
 800134e:	f040 80cf 	bne.w	80014f0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001352:	4b52      	ldr	r3, [pc, #328]	; (800149c <HAL_RCC_OscConfig+0x784>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f003 0203 	and.w	r2, r3, #3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	429a      	cmp	r2, r3
 8001364:	d12c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	3b01      	subs	r3, #1
 8001372:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001374:	429a      	cmp	r2, r3
 8001376:	d123      	bne.n	80013c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001382:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001384:	429a      	cmp	r2, r3
 8001386:	d11b      	bne.n	80013c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001392:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001394:	429a      	cmp	r2, r3
 8001396:	d113      	bne.n	80013c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a2:	085b      	lsrs	r3, r3, #1
 80013a4:	3b01      	subs	r3, #1
 80013a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d109      	bne.n	80013c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	3b01      	subs	r3, #1
 80013ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013bc:	429a      	cmp	r2, r3
 80013be:	d071      	beq.n	80014a4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2b0c      	cmp	r3, #12
 80013c4:	d068      	beq.n	8001498 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80013c6:	4b35      	ldr	r3, [pc, #212]	; (800149c <HAL_RCC_OscConfig+0x784>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d105      	bne.n	80013de <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80013d2:	4b32      	ldr	r3, [pc, #200]	; (800149c <HAL_RCC_OscConfig+0x784>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e0ac      	b.n	800153c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013e2:	4b2e      	ldr	r3, [pc, #184]	; (800149c <HAL_RCC_OscConfig+0x784>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a2d      	ldr	r2, [pc, #180]	; (800149c <HAL_RCC_OscConfig+0x784>)
 80013e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013ee:	f7ff faf9 	bl	80009e4 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f4:	e008      	b.n	8001408 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f6:	f7ff faf5 	bl	80009e4 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e099      	b.n	800153c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f0      	bne.n	80013f6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001414:	4b21      	ldr	r3, [pc, #132]	; (800149c <HAL_RCC_OscConfig+0x784>)
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <HAL_RCC_OscConfig+0x788>)
 800141a:	4013      	ands	r3, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001424:	3a01      	subs	r2, #1
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	4311      	orrs	r1, r2
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800142e:	0212      	lsls	r2, r2, #8
 8001430:	4311      	orrs	r1, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001436:	0852      	lsrs	r2, r2, #1
 8001438:	3a01      	subs	r2, #1
 800143a:	0552      	lsls	r2, r2, #21
 800143c:	4311      	orrs	r1, r2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001442:	0852      	lsrs	r2, r2, #1
 8001444:	3a01      	subs	r2, #1
 8001446:	0652      	lsls	r2, r2, #25
 8001448:	4311      	orrs	r1, r2
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800144e:	06d2      	lsls	r2, r2, #27
 8001450:	430a      	orrs	r2, r1
 8001452:	4912      	ldr	r1, [pc, #72]	; (800149c <HAL_RCC_OscConfig+0x784>)
 8001454:	4313      	orrs	r3, r2
 8001456:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0f      	ldr	r2, [pc, #60]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800145e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001462:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001464:	4b0d      	ldr	r3, [pc, #52]	; (800149c <HAL_RCC_OscConfig+0x784>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	4a0c      	ldr	r2, [pc, #48]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800146a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800146e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001470:	f7ff fab8 	bl	80009e4 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001478:	f7ff fab4 	bl	80009e4 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e058      	b.n	800153c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800148a:	4b04      	ldr	r3, [pc, #16]	; (800149c <HAL_RCC_OscConfig+0x784>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001496:	e050      	b.n	800153a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e04f      	b.n	800153c <HAL_RCC_OscConfig+0x824>
 800149c:	40021000 	.word	0x40021000
 80014a0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014a4:	4b27      	ldr	r3, [pc, #156]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d144      	bne.n	800153a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80014b0:	4b24      	ldr	r3, [pc, #144]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a23      	ldr	r2, [pc, #140]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	4a20      	ldr	r2, [pc, #128]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80014c8:	f7ff fa8c 	bl	80009e4 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d0:	f7ff fa88 	bl	80009e4 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e02c      	b.n	800153c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x7b8>
 80014ee:	e024      	b.n	800153a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2b0c      	cmp	r3, #12
 80014f4:	d01f      	beq.n	8001536 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a12      	ldr	r2, [pc, #72]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 80014fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001502:	f7ff fa6f 	bl	80009e4 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150a:	f7ff fa6b 	bl	80009e4 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e00f      	b.n	800153c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f0      	bne.n	800150a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	4905      	ldr	r1, [pc, #20]	; (8001544 <HAL_RCC_OscConfig+0x82c>)
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_RCC_OscConfig+0x830>)
 8001530:	4013      	ands	r3, r2
 8001532:	60cb      	str	r3, [r1, #12]
 8001534:	e001      	b.n	800153a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3720      	adds	r7, #32
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000
 8001548:	feeefffc 	.word	0xfeeefffc

0800154c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0e7      	b.n	8001730 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001560:	4b75      	ldr	r3, [pc, #468]	; (8001738 <HAL_RCC_ClockConfig+0x1ec>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d910      	bls.n	8001590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b72      	ldr	r3, [pc, #456]	; (8001738 <HAL_RCC_ClockConfig+0x1ec>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 0207 	bic.w	r2, r3, #7
 8001576:	4970      	ldr	r1, [pc, #448]	; (8001738 <HAL_RCC_ClockConfig+0x1ec>)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b6e      	ldr	r3, [pc, #440]	; (8001738 <HAL_RCC_ClockConfig+0x1ec>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0cf      	b.n	8001730 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d010      	beq.n	80015be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	4b66      	ldr	r3, [pc, #408]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d908      	bls.n	80015be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ac:	4b63      	ldr	r3, [pc, #396]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	4960      	ldr	r1, [pc, #384]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d04c      	beq.n	8001664 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015d2:	4b5a      	ldr	r3, [pc, #360]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d121      	bne.n	8001622 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e0a6      	b.n	8001730 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ea:	4b54      	ldr	r3, [pc, #336]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d115      	bne.n	8001622 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e09a      	b.n	8001730 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d107      	bne.n	8001612 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001602:	4b4e      	ldr	r3, [pc, #312]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d109      	bne.n	8001622 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e08e      	b.n	8001730 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001612:	4b4a      	ldr	r3, [pc, #296]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e086      	b.n	8001730 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001622:	4b46      	ldr	r3, [pc, #280]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f023 0203 	bic.w	r2, r3, #3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4943      	ldr	r1, [pc, #268]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 8001630:	4313      	orrs	r3, r2
 8001632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001634:	f7ff f9d6 	bl	80009e4 <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163a:	e00a      	b.n	8001652 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163c:	f7ff f9d2 	bl	80009e4 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f241 3288 	movw	r2, #5000	; 0x1388
 800164a:	4293      	cmp	r3, r2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e06e      	b.n	8001730 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	4b3a      	ldr	r3, [pc, #232]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 020c 	and.w	r2, r3, #12
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	429a      	cmp	r2, r3
 8001662:	d1eb      	bne.n	800163c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d010      	beq.n	8001692 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	4b31      	ldr	r3, [pc, #196]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800167c:	429a      	cmp	r2, r3
 800167e:	d208      	bcs.n	8001692 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001680:	4b2e      	ldr	r3, [pc, #184]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	492b      	ldr	r1, [pc, #172]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 800168e:	4313      	orrs	r3, r2
 8001690:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001692:	4b29      	ldr	r3, [pc, #164]	; (8001738 <HAL_RCC_ClockConfig+0x1ec>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d210      	bcs.n	80016c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <HAL_RCC_ClockConfig+0x1ec>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f023 0207 	bic.w	r2, r3, #7
 80016a8:	4923      	ldr	r1, [pc, #140]	; (8001738 <HAL_RCC_ClockConfig+0x1ec>)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <HAL_RCC_ClockConfig+0x1ec>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e036      	b.n	8001730 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d008      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ce:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	4918      	ldr	r1, [pc, #96]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d009      	beq.n	8001700 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4910      	ldr	r1, [pc, #64]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001700:	f000 f824 	bl	800174c <HAL_RCC_GetSysClockFreq>
 8001704:	4602      	mov	r2, r0
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <HAL_RCC_ClockConfig+0x1f0>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	490b      	ldr	r1, [pc, #44]	; (8001740 <HAL_RCC_ClockConfig+0x1f4>)
 8001712:	5ccb      	ldrb	r3, [r1, r3]
 8001714:	f003 031f 	and.w	r3, r3, #31
 8001718:	fa22 f303 	lsr.w	r3, r2, r3
 800171c:	4a09      	ldr	r2, [pc, #36]	; (8001744 <HAL_RCC_ClockConfig+0x1f8>)
 800171e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_RCC_ClockConfig+0x1fc>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff f90d 	bl	8000944 <HAL_InitTick>
 800172a:	4603      	mov	r3, r0
 800172c:	72fb      	strb	r3, [r7, #11]

  return status;
 800172e:	7afb      	ldrb	r3, [r7, #11]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40022000 	.word	0x40022000
 800173c:	40021000 	.word	0x40021000
 8001740:	08002224 	.word	0x08002224
 8001744:	20000000 	.word	0x20000000
 8001748:	20000004 	.word	0x20000004

0800174c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	; 0x24
 8001750:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800175a:	4b3e      	ldr	r3, [pc, #248]	; (8001854 <HAL_RCC_GetSysClockFreq+0x108>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001764:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <HAL_RCC_GetSysClockFreq+0x108>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_GetSysClockFreq+0x34>
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	2b0c      	cmp	r3, #12
 8001778:	d121      	bne.n	80017be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d11e      	bne.n	80017be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001780:	4b34      	ldr	r3, [pc, #208]	; (8001854 <HAL_RCC_GetSysClockFreq+0x108>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d107      	bne.n	800179c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800178c:	4b31      	ldr	r3, [pc, #196]	; (8001854 <HAL_RCC_GetSysClockFreq+0x108>)
 800178e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	f003 030f 	and.w	r3, r3, #15
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	e005      	b.n	80017a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800179c:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <HAL_RCC_GetSysClockFreq+0x108>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80017a8:	4a2b      	ldr	r2, [pc, #172]	; (8001858 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10d      	bne.n	80017d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017bc:	e00a      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d102      	bne.n	80017ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <HAL_RCC_GetSysClockFreq+0x110>)
 80017c6:	61bb      	str	r3, [r7, #24]
 80017c8:	e004      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017d0:	4b23      	ldr	r3, [pc, #140]	; (8001860 <HAL_RCC_GetSysClockFreq+0x114>)
 80017d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	2b0c      	cmp	r3, #12
 80017d8:	d134      	bne.n	8001844 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <HAL_RCC_GetSysClockFreq+0x108>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d003      	beq.n	80017f8 <HAL_RCC_GetSysClockFreq+0xac>
 80017f0:	e005      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_RCC_GetSysClockFreq+0x110>)
 80017f4:	617b      	str	r3, [r7, #20]
      break;
 80017f6:	e005      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <HAL_RCC_GetSysClockFreq+0x114>)
 80017fa:	617b      	str	r3, [r7, #20]
      break;
 80017fc:	e002      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	617b      	str	r3, [r7, #20]
      break;
 8001802:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001804:	4b13      	ldr	r3, [pc, #76]	; (8001854 <HAL_RCC_GetSysClockFreq+0x108>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	3301      	adds	r3, #1
 8001810:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_RCC_GetSysClockFreq+0x108>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	0a1b      	lsrs	r3, r3, #8
 8001818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	fb03 f202 	mul.w	r2, r3, r2
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	fbb2 f3f3 	udiv	r3, r2, r3
 8001828:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <HAL_RCC_GetSysClockFreq+0x108>)
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	0e5b      	lsrs	r3, r3, #25
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	3301      	adds	r3, #1
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001842:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001844:	69bb      	ldr	r3, [r7, #24]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3724      	adds	r7, #36	; 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	08002234 	.word	0x08002234
 800185c:	00f42400 	.word	0x00f42400
 8001860:	007a1200 	.word	0x007a1200

08001864 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800187c:	f7ff f9e8 	bl	8000c50 <HAL_PWREx_GetVoltageRange>
 8001880:	6178      	str	r0, [r7, #20]
 8001882:	e014      	b.n	80018ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001884:	4b25      	ldr	r3, [pc, #148]	; (800191c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	4a24      	ldr	r2, [pc, #144]	; (800191c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800188a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188e:	6593      	str	r3, [r2, #88]	; 0x58
 8001890:	4b22      	ldr	r3, [pc, #136]	; (800191c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800189c:	f7ff f9d8 	bl	8000c50 <HAL_PWREx_GetVoltageRange>
 80018a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80018a2:	4b1e      	ldr	r3, [pc, #120]	; (800191c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a6:	4a1d      	ldr	r2, [pc, #116]	; (800191c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018b4:	d10b      	bne.n	80018ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b80      	cmp	r3, #128	; 0x80
 80018ba:	d919      	bls.n	80018f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2ba0      	cmp	r3, #160	; 0xa0
 80018c0:	d902      	bls.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018c2:	2302      	movs	r3, #2
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	e013      	b.n	80018f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018c8:	2301      	movs	r3, #1
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	e010      	b.n	80018f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b80      	cmp	r3, #128	; 0x80
 80018d2:	d902      	bls.n	80018da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018d4:	2303      	movs	r3, #3
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	e00a      	b.n	80018f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b80      	cmp	r3, #128	; 0x80
 80018de:	d102      	bne.n	80018e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018e0:	2302      	movs	r3, #2
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	e004      	b.n	80018f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2b70      	cmp	r3, #112	; 0x70
 80018ea:	d101      	bne.n	80018f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018ec:	2301      	movs	r3, #1
 80018ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 0207 	bic.w	r2, r3, #7
 80018f8:	4909      	ldr	r1, [pc, #36]	; (8001920 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	429a      	cmp	r2, r3
 800190c:	d001      	beq.n	8001912 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40021000 	.word	0x40021000
 8001920:	40022000 	.word	0x40022000

08001924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e049      	b.n	80019ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d106      	bne.n	8001950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7fe ff4e 	bl	80007ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2202      	movs	r2, #2
 8001954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3304      	adds	r3, #4
 8001960:	4619      	mov	r1, r3
 8001962:	4610      	mov	r0, r2
 8001964:	f000 fa46 	bl	8001df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d122      	bne.n	8001a2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d11b      	bne.n	8001a2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f06f 0202 	mvn.w	r2, #2
 80019fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f9ce 	bl	8001db6 <HAL_TIM_IC_CaptureCallback>
 8001a1a:	e005      	b.n	8001a28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f9c0 	bl	8001da2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f9d1 	bl	8001dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d122      	bne.n	8001a82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d11b      	bne.n	8001a82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f06f 0204 	mvn.w	r2, #4
 8001a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2202      	movs	r2, #2
 8001a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f9a4 	bl	8001db6 <HAL_TIM_IC_CaptureCallback>
 8001a6e:	e005      	b.n	8001a7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f996 	bl	8001da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f9a7 	bl	8001dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d122      	bne.n	8001ad6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d11b      	bne.n	8001ad6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f06f 0208 	mvn.w	r2, #8
 8001aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2204      	movs	r2, #4
 8001aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f97a 	bl	8001db6 <HAL_TIM_IC_CaptureCallback>
 8001ac2:	e005      	b.n	8001ad0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f96c 	bl	8001da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f97d 	bl	8001dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	2b10      	cmp	r3, #16
 8001ae2:	d122      	bne.n	8001b2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d11b      	bne.n	8001b2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f06f 0210 	mvn.w	r2, #16
 8001afa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2208      	movs	r2, #8
 8001b00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f950 	bl	8001db6 <HAL_TIM_IC_CaptureCallback>
 8001b16:	e005      	b.n	8001b24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f942 	bl	8001da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f953 	bl	8001dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d10e      	bne.n	8001b56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d107      	bne.n	8001b56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f06f 0201 	mvn.w	r2, #1
 8001b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7fe fbf5 	bl	8000340 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b60:	2b80      	cmp	r3, #128	; 0x80
 8001b62:	d10e      	bne.n	8001b82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6e:	2b80      	cmp	r3, #128	; 0x80
 8001b70:	d107      	bne.n	8001b82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 faff 	bl	8002180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b90:	d10e      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9c:	2b80      	cmp	r3, #128	; 0x80
 8001b9e:	d107      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 faf2 	bl	8002194 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bba:	2b40      	cmp	r3, #64	; 0x40
 8001bbc:	d10e      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc8:	2b40      	cmp	r3, #64	; 0x40
 8001bca:	d107      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f901 	bl	8001dde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	d10e      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	d107      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0220 	mvn.w	r2, #32
 8001c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fab2 	bl	800216c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_TIM_ConfigClockSource+0x1c>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e0b6      	b.n	8001d9a <HAL_TIM_ConfigClockSource+0x18a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c68:	d03e      	beq.n	8001ce8 <HAL_TIM_ConfigClockSource+0xd8>
 8001c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c6e:	f200 8087 	bhi.w	8001d80 <HAL_TIM_ConfigClockSource+0x170>
 8001c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c76:	f000 8086 	beq.w	8001d86 <HAL_TIM_ConfigClockSource+0x176>
 8001c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c7e:	d87f      	bhi.n	8001d80 <HAL_TIM_ConfigClockSource+0x170>
 8001c80:	2b70      	cmp	r3, #112	; 0x70
 8001c82:	d01a      	beq.n	8001cba <HAL_TIM_ConfigClockSource+0xaa>
 8001c84:	2b70      	cmp	r3, #112	; 0x70
 8001c86:	d87b      	bhi.n	8001d80 <HAL_TIM_ConfigClockSource+0x170>
 8001c88:	2b60      	cmp	r3, #96	; 0x60
 8001c8a:	d050      	beq.n	8001d2e <HAL_TIM_ConfigClockSource+0x11e>
 8001c8c:	2b60      	cmp	r3, #96	; 0x60
 8001c8e:	d877      	bhi.n	8001d80 <HAL_TIM_ConfigClockSource+0x170>
 8001c90:	2b50      	cmp	r3, #80	; 0x50
 8001c92:	d03c      	beq.n	8001d0e <HAL_TIM_ConfigClockSource+0xfe>
 8001c94:	2b50      	cmp	r3, #80	; 0x50
 8001c96:	d873      	bhi.n	8001d80 <HAL_TIM_ConfigClockSource+0x170>
 8001c98:	2b40      	cmp	r3, #64	; 0x40
 8001c9a:	d058      	beq.n	8001d4e <HAL_TIM_ConfigClockSource+0x13e>
 8001c9c:	2b40      	cmp	r3, #64	; 0x40
 8001c9e:	d86f      	bhi.n	8001d80 <HAL_TIM_ConfigClockSource+0x170>
 8001ca0:	2b30      	cmp	r3, #48	; 0x30
 8001ca2:	d064      	beq.n	8001d6e <HAL_TIM_ConfigClockSource+0x15e>
 8001ca4:	2b30      	cmp	r3, #48	; 0x30
 8001ca6:	d86b      	bhi.n	8001d80 <HAL_TIM_ConfigClockSource+0x170>
 8001ca8:	2b20      	cmp	r3, #32
 8001caa:	d060      	beq.n	8001d6e <HAL_TIM_ConfigClockSource+0x15e>
 8001cac:	2b20      	cmp	r3, #32
 8001cae:	d867      	bhi.n	8001d80 <HAL_TIM_ConfigClockSource+0x170>
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d05c      	beq.n	8001d6e <HAL_TIM_ConfigClockSource+0x15e>
 8001cb4:	2b10      	cmp	r3, #16
 8001cb6:	d05a      	beq.n	8001d6e <HAL_TIM_ConfigClockSource+0x15e>
 8001cb8:	e062      	b.n	8001d80 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	6899      	ldr	r1, [r3, #8]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f000 f9a7 	bl	800201c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001cdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	609a      	str	r2, [r3, #8]
      break;
 8001ce6:	e04f      	b.n	8001d88 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	6899      	ldr	r1, [r3, #8]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f000 f990 	bl	800201c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d0a:	609a      	str	r2, [r3, #8]
      break;
 8001d0c:	e03c      	b.n	8001d88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	6859      	ldr	r1, [r3, #4]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f000 f904 	bl	8001f28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2150      	movs	r1, #80	; 0x50
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f95d 	bl	8001fe6 <TIM_ITRx_SetConfig>
      break;
 8001d2c:	e02c      	b.n	8001d88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	6859      	ldr	r1, [r3, #4]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	f000 f923 	bl	8001f86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2160      	movs	r1, #96	; 0x60
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f94d 	bl	8001fe6 <TIM_ITRx_SetConfig>
      break;
 8001d4c:	e01c      	b.n	8001d88 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6859      	ldr	r1, [r3, #4]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f000 f8e4 	bl	8001f28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2140      	movs	r1, #64	; 0x40
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f93d 	bl	8001fe6 <TIM_ITRx_SetConfig>
      break;
 8001d6c:	e00c      	b.n	8001d88 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4619      	mov	r1, r3
 8001d78:	4610      	mov	r0, r2
 8001d7a:	f000 f934 	bl	8001fe6 <TIM_ITRx_SetConfig>
      break;
 8001d7e:	e003      	b.n	8001d88 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
      break;
 8001d84:	e000      	b.n	8001d88 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8001d86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a40      	ldr	r2, [pc, #256]	; (8001f08 <TIM_Base_SetConfig+0x114>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d013      	beq.n	8001e34 <TIM_Base_SetConfig+0x40>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e12:	d00f      	beq.n	8001e34 <TIM_Base_SetConfig+0x40>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a3d      	ldr	r2, [pc, #244]	; (8001f0c <TIM_Base_SetConfig+0x118>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d00b      	beq.n	8001e34 <TIM_Base_SetConfig+0x40>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a3c      	ldr	r2, [pc, #240]	; (8001f10 <TIM_Base_SetConfig+0x11c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d007      	beq.n	8001e34 <TIM_Base_SetConfig+0x40>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a3b      	ldr	r2, [pc, #236]	; (8001f14 <TIM_Base_SetConfig+0x120>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d003      	beq.n	8001e34 <TIM_Base_SetConfig+0x40>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a3a      	ldr	r2, [pc, #232]	; (8001f18 <TIM_Base_SetConfig+0x124>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d108      	bne.n	8001e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a2f      	ldr	r2, [pc, #188]	; (8001f08 <TIM_Base_SetConfig+0x114>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d01f      	beq.n	8001e8e <TIM_Base_SetConfig+0x9a>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e54:	d01b      	beq.n	8001e8e <TIM_Base_SetConfig+0x9a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a2c      	ldr	r2, [pc, #176]	; (8001f0c <TIM_Base_SetConfig+0x118>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d017      	beq.n	8001e8e <TIM_Base_SetConfig+0x9a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a2b      	ldr	r2, [pc, #172]	; (8001f10 <TIM_Base_SetConfig+0x11c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d013      	beq.n	8001e8e <TIM_Base_SetConfig+0x9a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a2a      	ldr	r2, [pc, #168]	; (8001f14 <TIM_Base_SetConfig+0x120>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d00f      	beq.n	8001e8e <TIM_Base_SetConfig+0x9a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a29      	ldr	r2, [pc, #164]	; (8001f18 <TIM_Base_SetConfig+0x124>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00b      	beq.n	8001e8e <TIM_Base_SetConfig+0x9a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a28      	ldr	r2, [pc, #160]	; (8001f1c <TIM_Base_SetConfig+0x128>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d007      	beq.n	8001e8e <TIM_Base_SetConfig+0x9a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <TIM_Base_SetConfig+0x12c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d003      	beq.n	8001e8e <TIM_Base_SetConfig+0x9a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a26      	ldr	r2, [pc, #152]	; (8001f24 <TIM_Base_SetConfig+0x130>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d108      	bne.n	8001ea0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <TIM_Base_SetConfig+0x114>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00f      	beq.n	8001eec <TIM_Base_SetConfig+0xf8>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <TIM_Base_SetConfig+0x124>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d00b      	beq.n	8001eec <TIM_Base_SetConfig+0xf8>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a11      	ldr	r2, [pc, #68]	; (8001f1c <TIM_Base_SetConfig+0x128>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d007      	beq.n	8001eec <TIM_Base_SetConfig+0xf8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a10      	ldr	r2, [pc, #64]	; (8001f20 <TIM_Base_SetConfig+0x12c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d003      	beq.n	8001eec <TIM_Base_SetConfig+0xf8>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a0f      	ldr	r2, [pc, #60]	; (8001f24 <TIM_Base_SetConfig+0x130>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d103      	bne.n	8001ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	615a      	str	r2, [r3, #20]
}
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40012c00 	.word	0x40012c00
 8001f0c:	40000400 	.word	0x40000400
 8001f10:	40000800 	.word	0x40000800
 8001f14:	40000c00 	.word	0x40000c00
 8001f18:	40013400 	.word	0x40013400
 8001f1c:	40014000 	.word	0x40014000
 8001f20:	40014400 	.word	0x40014400
 8001f24:	40014800 	.word	0x40014800

08001f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b087      	sub	sp, #28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	f023 0201 	bic.w	r2, r3, #1
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f023 030a 	bic.w	r3, r3, #10
 8001f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	621a      	str	r2, [r3, #32]
}
 8001f7a:	bf00      	nop
 8001f7c:	371c      	adds	r7, #28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b087      	sub	sp, #28
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	f023 0210 	bic.w	r2, r3, #16
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	031b      	lsls	r3, r3, #12
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001fc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	621a      	str	r2, [r3, #32]
}
 8001fda:	bf00      	nop
 8001fdc:	371c      	adds	r7, #28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b085      	sub	sp, #20
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	f043 0307 	orr.w	r3, r3, #7
 8002008:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	609a      	str	r2, [r3, #8]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800201c:	b480      	push	{r7}
 800201e:	b087      	sub	sp, #28
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002036:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	021a      	lsls	r2, r3, #8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	431a      	orrs	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4313      	orrs	r3, r2
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	4313      	orrs	r3, r2
 8002048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	609a      	str	r2, [r3, #8]
}
 8002050:	bf00      	nop
 8002052:	371c      	adds	r7, #28
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002070:	2302      	movs	r3, #2
 8002072:	e068      	b.n	8002146 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2e      	ldr	r2, [pc, #184]	; (8002154 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d004      	beq.n	80020a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a2d      	ldr	r2, [pc, #180]	; (8002158 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d108      	bne.n	80020ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80020ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1e      	ldr	r2, [pc, #120]	; (8002154 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d01d      	beq.n	800211a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e6:	d018      	beq.n	800211a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a1b      	ldr	r2, [pc, #108]	; (800215c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1a      	ldr	r2, [pc, #104]	; (8002160 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d00e      	beq.n	800211a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a18      	ldr	r2, [pc, #96]	; (8002164 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d009      	beq.n	800211a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a13      	ldr	r2, [pc, #76]	; (8002158 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d004      	beq.n	800211a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a14      	ldr	r2, [pc, #80]	; (8002168 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d10c      	bne.n	8002134 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002120:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	4313      	orrs	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40012c00 	.word	0x40012c00
 8002158:	40013400 	.word	0x40013400
 800215c:	40000400 	.word	0x40000400
 8002160:	40000800 	.word	0x40000800
 8002164:	40000c00 	.word	0x40000c00
 8002168:	40014000 	.word	0x40014000

0800216c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <__libc_init_array>:
 80021a8:	b570      	push	{r4, r5, r6, lr}
 80021aa:	4d0d      	ldr	r5, [pc, #52]	; (80021e0 <__libc_init_array+0x38>)
 80021ac:	4c0d      	ldr	r4, [pc, #52]	; (80021e4 <__libc_init_array+0x3c>)
 80021ae:	1b64      	subs	r4, r4, r5
 80021b0:	10a4      	asrs	r4, r4, #2
 80021b2:	2600      	movs	r6, #0
 80021b4:	42a6      	cmp	r6, r4
 80021b6:	d109      	bne.n	80021cc <__libc_init_array+0x24>
 80021b8:	4d0b      	ldr	r5, [pc, #44]	; (80021e8 <__libc_init_array+0x40>)
 80021ba:	4c0c      	ldr	r4, [pc, #48]	; (80021ec <__libc_init_array+0x44>)
 80021bc:	f000 f820 	bl	8002200 <_init>
 80021c0:	1b64      	subs	r4, r4, r5
 80021c2:	10a4      	asrs	r4, r4, #2
 80021c4:	2600      	movs	r6, #0
 80021c6:	42a6      	cmp	r6, r4
 80021c8:	d105      	bne.n	80021d6 <__libc_init_array+0x2e>
 80021ca:	bd70      	pop	{r4, r5, r6, pc}
 80021cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80021d0:	4798      	blx	r3
 80021d2:	3601      	adds	r6, #1
 80021d4:	e7ee      	b.n	80021b4 <__libc_init_array+0xc>
 80021d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80021da:	4798      	blx	r3
 80021dc:	3601      	adds	r6, #1
 80021de:	e7f2      	b.n	80021c6 <__libc_init_array+0x1e>
 80021e0:	08002264 	.word	0x08002264
 80021e4:	08002264 	.word	0x08002264
 80021e8:	08002264 	.word	0x08002264
 80021ec:	08002268 	.word	0x08002268

080021f0 <memset>:
 80021f0:	4402      	add	r2, r0
 80021f2:	4603      	mov	r3, r0
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d100      	bne.n	80021fa <memset+0xa>
 80021f8:	4770      	bx	lr
 80021fa:	f803 1b01 	strb.w	r1, [r3], #1
 80021fe:	e7f9      	b.n	80021f4 <memset+0x4>

08002200 <_init>:
 8002200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002202:	bf00      	nop
 8002204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002206:	bc08      	pop	{r3}
 8002208:	469e      	mov	lr, r3
 800220a:	4770      	bx	lr

0800220c <_fini>:
 800220c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800220e:	bf00      	nop
 8002210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002212:	bc08      	pop	{r3}
 8002214:	469e      	mov	lr, r3
 8002216:	4770      	bx	lr
